/*@@
   @header  ahfinderdirect_Prototypes.h
   @author  Automatically generated by CreateFunctionBindings.pl
   @desc
            Prototypes for overloaded functions used by this thorn
   @enddesc
  @@*/


#ifndef _AHFINDERDIRECT_PROTOTYPES_H_
#define _AHFINDERDIRECT_PROTOTYPES_H_  1

#ifdef CCODE
#ifdef __cplusplus
extern "C" {
#endif

CCTK_INT HorizonCentroid(const CCTK_INT horizon_number ,
 CCTK_REAL* centroid_x ,
 CCTK_REAL* centroid_y ,
 CCTK_REAL* centroid_z);
CCTK_INT AHFinderDirect_horizon_centroid(const CCTK_INT horizon_number ,
 CCTK_REAL* centroid_x ,
 CCTK_REAL* centroid_y ,
 CCTK_REAL* centroid_z);

CCTK_INT HorizonLocalCoordinateOrigin(const CCTK_INT horizon_number ,
 CCTK_REAL* origin_x ,
 CCTK_REAL* origin_y ,
 CCTK_REAL* origin_z);
CCTK_INT AHFinderDirect_local_coordinate_origin(const CCTK_INT horizon_number ,
 CCTK_REAL* origin_x ,
 CCTK_REAL* origin_y ,
 CCTK_REAL* origin_z);

CCTK_INT HorizonRadiusInDirection(const CCTK_INT horizon_number ,
 const CCTK_INT N_points ,
 const CCTK_REAL* x ,
 const CCTK_REAL* y ,
 const CCTK_REAL* z ,
 CCTK_REAL* radius);
CCTK_INT AHFinderDirect_radius_in_direction(const CCTK_INT horizon_number ,
 const CCTK_INT N_points ,
 const CCTK_REAL* x ,
 const CCTK_REAL* y ,
 const CCTK_REAL* z ,
 CCTK_REAL* radius);

CCTK_INT HorizonWasFound(const CCTK_INT horizon_number);
CCTK_INT AHFinderDirect_horizon_was_found(const CCTK_INT horizon_number);

CCTK_INT IO_TruncateOutputFiles(const CCTK_POINTER_TO_CONST GH);

void SetDriftCorrectPosition(const CCTK_POINTER_TO_CONST GH ,
 const CCTK_REAL x ,
 const CCTK_REAL y ,
 const CCTK_REAL z);

#ifdef __cplusplus
}
#endif
#endif /* CCODE */

#ifdef FCODE
#ifdef F90CODE
#define DECLARE_AHFINDERDIRECT_FUNCTIONS _DECLARE_CCTK_FUNCTIONS \
  interface &&\
     CCTK_INT function HorizonCentroid (horizon_number, centroid_x, centroid_y, centroid_z) &&\
       implicit none &&\
       CCTK_INT horizon_number &&\
       CCTK_REAL centroid_x &&\
       CCTK_REAL centroid_y &&\
       CCTK_REAL centroid_z &&\
     end function HorizonCentroid &&\
  end interface &&\
  interface &&\
     CCTK_INT function HorizonLocalCoordinateOrigin (horizon_number, origin_x, origin_y, origin_z) &&\
       implicit none &&\
       CCTK_INT horizon_number &&\
       CCTK_REAL origin_x &&\
       CCTK_REAL origin_y &&\
       CCTK_REAL origin_z &&\
     end function HorizonLocalCoordinateOrigin &&\
  end interface &&\
  interface &&\
     CCTK_INT function HorizonRadiusInDirection (horizon_number, N_points, x, y, z, radius) &&\
       implicit none &&\
       CCTK_INT horizon_number &&\
       CCTK_INT N_points &&\
       CCTK_REAL x(*) &&\
       CCTK_REAL y(*) &&\
       CCTK_REAL z(*) &&\
       CCTK_REAL radius(*) &&\
     end function HorizonRadiusInDirection &&\
  end interface &&\
  interface &&\
     CCTK_INT function HorizonWasFound (horizon_number) &&\
       implicit none &&\
       CCTK_INT horizon_number &&\
     end function HorizonWasFound &&\
  end interface &&\
  interface &&\
     CCTK_INT function IO_TruncateOutputFiles (GH) &&\
       implicit none &&\
       CCTK_POINTER_TO_CONST GH &&\
     end function IO_TruncateOutputFiles &&\
  end interface &&\
  interface &&\
     subroutine SetDriftCorrectPosition (GH, x, y, z) &&\
       implicit none &&\
       CCTK_POINTER_TO_CONST GH &&\
       CCTK_REAL x &&\
       CCTK_REAL y &&\
       CCTK_REAL z &&\
     end subroutine SetDriftCorrectPosition &&\
  end interface &&\

#else /* ! F90CODE */

#define DECLARE_AHFINDERDIRECT_FUNCTIONS _DECLARE_CCTK_FUNCTIONS \
  external HorizonCentroid &&\
  CCTK_INT HorizonCentroid &&\
  external HorizonLocalCoordinateOrigin &&\
  CCTK_INT HorizonLocalCoordinateOrigin &&\
  external HorizonRadiusInDirection &&\
  CCTK_INT HorizonRadiusInDirection &&\
  external HorizonWasFound &&\
  CCTK_INT HorizonWasFound &&\
  external IO_TruncateOutputFiles &&\
  CCTK_INT IO_TruncateOutputFiles &&\
  external SetDriftCorrectPosition &&\

#endif /* ! F90CODE */
#endif /* FCODE */

#endif

