/*@@
   @header  IDScalarWaveMoL_arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn IDScalarWaveMoL
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_IDSCALARWAVEMOL_PRIVATE_FARGUMENTS \
INTEGER X0scalarevolveerror&&\
INTEGER X1scalarevolveerror&&\
INTEGER X2scalarevolveerror&&\
CCTK_REAL phierror(X0scalarevolveerror,X1scalarevolveerror,X2scalarevolveerror)&&\
CCTK_REAL psierror(X0scalarevolveerror,X1scalarevolveerror,X2scalarevolveerror)&&\


#define IDSCALARWAVEMOL_PRIVATE_FARGUMENTS \
X0scalarevolveerror,X1scalarevolveerror,X2scalarevolveerror,phierror,psierror

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_IDSCALARWAVEMOL_PRIVATE_CARGUMENTS \
CCTK_REAL * CCTK_RESTRICT phierror = (cctki_dummy_int = &phierror - &phierror, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "IDSCALARWAVEMOL", "phierror")); \
CCTK_REAL * CCTK_RESTRICT psierror = (cctki_dummy_int = &psierror - &psierror, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "IDSCALARWAVEMOL", "psierror"));

#define DECLARE_IDSCALARWAVEMOL_PRIVATE_C2F \
static int CCTKARGNUM_phierror = -1; \
static int CCTKGROUPNUM_scalarevolveerror = -1; \
static int CCTKARGNUM_psierror = -1;

#define INITIALISE_IDSCALARWAVEMOL_PRIVATE_C2F \
if(CCTKARGNUM_phierror == -1) CCTKARGNUM_phierror = CCTK_VarIndex("IDScalarWaveMoL::phierror"); \
if(CCTKGROUPNUM_scalarevolveerror == -1) CCTKGROUPNUM_scalarevolveerror = CCTK_GroupIndex("IDScalarWaveMoL::scalarevolveerror"); \
if(CCTKARGNUM_psierror == -1) CCTKARGNUM_psierror = CCTK_VarIndex("IDScalarWaveMoL::psierror");

#define IDSCALARWAVEMOL_PRIVATE_C2F_PROTO \
const int *,const int *,const int *,CCTK_REAL *,CCTK_REAL *

#define PASS_IDSCALARWAVEMOL_PRIVATE_C2F(GH) \
PASS_GROUPSIZE(scalarevolveerror, 0),\
PASS_GROUPSIZE(scalarevolveerror, 1),\
PASS_GROUPSIZE(scalarevolveerror, 2),\
(CCTK_REAL *)(PASS_REFERENCE(phierror, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psierror, 0))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_IDSCALARWAVEMOL_PROTECTED_FARGUMENTS \


#define IDSCALARWAVEMOL_PROTECTED_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_IDSCALARWAVEMOL_PROTECTED_CARGUMENTS \


#define DECLARE_IDSCALARWAVEMOL_PROTECTED_C2F \


#define INITIALISE_IDSCALARWAVEMOL_PROTECTED_C2F \


#define IDSCALARWAVEMOL_PROTECTED_C2F_PROTO \


#define PASS_IDSCALARWAVEMOL_PROTECTED_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_IDSCALARWAVEMOL_PUBLIC_FARGUMENTS \
INTEGER X0coordinates&&\
INTEGER X0scalarevolve&&\
INTEGER X1coordinates&&\
INTEGER X1scalarevolve&&\
INTEGER X2coordinates&&\
INTEGER X2scalarevolve&&\
CCTK_REAL coarse_dx&&\
CCTK_REAL coarse_dy&&\
CCTK_REAL coarse_dz&&\
CCTK_REAL phi(X0scalarevolve,X1scalarevolve,X2scalarevolve)&&\
CCTK_REAL phi_p(X0scalarevolve,X1scalarevolve,X2scalarevolve)&&\
CCTK_REAL phi_p_p(X0scalarevolve,X1scalarevolve,X2scalarevolve)&&\
CCTK_REAL psi(X0scalarevolve,X1scalarevolve,X2scalarevolve)&&\
CCTK_REAL psi_p(X0scalarevolve,X1scalarevolve,X2scalarevolve)&&\
CCTK_REAL psi_p_p(X0scalarevolve,X1scalarevolve,X2scalarevolve)&&\
CCTK_REAL r(X0coordinates,X1coordinates,X2coordinates)&&\
CCTK_REAL x(X0coordinates,X1coordinates,X2coordinates)&&\
CCTK_REAL y(X0coordinates,X1coordinates,X2coordinates)&&\
CCTK_REAL z(X0coordinates,X1coordinates,X2coordinates)&&\


#define IDSCALARWAVEMOL_PUBLIC_FARGUMENTS \
X0coordinates,X0scalarevolve,X1coordinates,X1scalarevolve,X2coordinates,X2scalarevolve,coarse_dx,coarse_dy,coarse_dz,phi,phi_p,phi_p_p,psi,psi_p,psi_p_p,r,x,y,z

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_IDSCALARWAVEMOL_PUBLIC_CARGUMENTS \
CCTK_REAL * CCTK_RESTRICT coarse_dx = (cctki_dummy_int = &coarse_dx - &coarse_dx, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "coarse_dx")); \
CCTK_REAL * CCTK_RESTRICT coarse_dy = (cctki_dummy_int = &coarse_dy - &coarse_dy, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "coarse_dy")); \
CCTK_REAL * CCTK_RESTRICT coarse_dz = (cctki_dummy_int = &coarse_dz - &coarse_dz, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "coarse_dz")); \
CCTK_REAL * CCTK_RESTRICT phi = (cctki_dummy_int = &phi - &phi, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "WAVETOYMOL", "phi")); \
CCTK_REAL * CCTK_RESTRICT phi_p = (cctki_dummy_int = &phi_p - &phi_p, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 1, "WAVETOYMOL", "phi")); \
CCTK_REAL * CCTK_RESTRICT phi_p_p = (cctki_dummy_int = &phi_p_p - &phi_p_p, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 2, "WAVETOYMOL", "phi")); \
CCTK_REAL * CCTK_RESTRICT psi = (cctki_dummy_int = &psi - &psi, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "WAVETOYMOL", "psi")); \
CCTK_REAL * CCTK_RESTRICT psi_p = (cctki_dummy_int = &psi_p - &psi_p, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 1, "WAVETOYMOL", "psi")); \
CCTK_REAL * CCTK_RESTRICT psi_p_p = (cctki_dummy_int = &psi_p_p - &psi_p_p, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 2, "WAVETOYMOL", "psi")); \
CCTK_REAL * CCTK_RESTRICT r = (cctki_dummy_int = &r - &r, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "r")); \
CCTK_REAL * CCTK_RESTRICT x = (cctki_dummy_int = &x - &x, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "x")); \
CCTK_REAL * CCTK_RESTRICT y = (cctki_dummy_int = &y - &y, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "y")); \
CCTK_REAL * CCTK_RESTRICT z = (cctki_dummy_int = &z - &z, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "z"));

#define DECLARE_IDSCALARWAVEMOL_PUBLIC_C2F \
static int CCTKARGNUM_coarse_dx = -1; \
static int CCTKGROUPNUM_gridspacings = -1; \
static int CCTKARGNUM_coarse_dy = -1; \
static int CCTKARGNUM_coarse_dz = -1; \
static int CCTKARGNUM_phi = -1; \
static int CCTKGROUPNUM_scalarevolve = -1; \
static int CCTKARGNUM_psi = -1; \
static int CCTKARGNUM_r = -1; \
static int CCTKGROUPNUM_coordinates = -1; \
static int CCTKARGNUM_x = -1; \
static int CCTKARGNUM_y = -1; \
static int CCTKARGNUM_z = -1;

#define INITIALISE_IDSCALARWAVEMOL_PUBLIC_C2F \
if(CCTKARGNUM_coarse_dx == -1) CCTKARGNUM_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
if(CCTKGROUPNUM_gridspacings == -1) CCTKGROUPNUM_gridspacings = CCTK_GroupIndex("GRID::gridspacings"); \
if(CCTKARGNUM_coarse_dy == -1) CCTKARGNUM_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
if(CCTKARGNUM_coarse_dz == -1) CCTKARGNUM_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
if(CCTKARGNUM_phi == -1) CCTKARGNUM_phi = CCTK_VarIndex("WAVETOYMOL::phi"); \
if(CCTKGROUPNUM_scalarevolve == -1) CCTKGROUPNUM_scalarevolve = CCTK_GroupIndex("WAVETOYMOL::scalarevolve"); \
if(CCTKARGNUM_psi == -1) CCTKARGNUM_psi = CCTK_VarIndex("WAVETOYMOL::psi"); \
if(CCTKARGNUM_r == -1) CCTKARGNUM_r = CCTK_VarIndex("GRID::r"); \
if(CCTKGROUPNUM_coordinates == -1) CCTKGROUPNUM_coordinates = CCTK_GroupIndex("GRID::coordinates"); \
if(CCTKARGNUM_x == -1) CCTKARGNUM_x = CCTK_VarIndex("GRID::x"); \
if(CCTKARGNUM_y == -1) CCTKARGNUM_y = CCTK_VarIndex("GRID::y"); \
if(CCTKARGNUM_z == -1) CCTKARGNUM_z = CCTK_VarIndex("GRID::z");

#define IDSCALARWAVEMOL_PUBLIC_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,const int *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *

#define PASS_IDSCALARWAVEMOL_PUBLIC_C2F(GH) \
PASS_GROUPSIZE(coordinates, 0),\
PASS_GROUPSIZE(scalarevolve, 0),\
PASS_GROUPSIZE(coordinates, 1),\
PASS_GROUPSIZE(scalarevolve, 1),\
PASS_GROUPSIZE(coordinates, 2),\
PASS_GROUPSIZE(scalarevolve, 2),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(phi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(phi, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(phi, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(psi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psi, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(psi, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(r, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(z, 0))

#endif /* CCODE */

#ifdef FCODE
#define IDSCALARWAVEMOL_FARGUMENTS _CCTK_FARGUMENTS, IDSCALARWAVEMOL_PRIVATE_FARGUMENTS, IDSCALARWAVEMOL_PUBLIC_FARGUMENTS

#define DECLARE_IDSCALARWAVEMOL_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_IDSCALARWAVEMOL_PRIVATE_FARGUMENTS DECLARE_IDSCALARWAVEMOL_PUBLIC_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_IDSCALARWAVEMOL_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_IDSCALARWAVEMOL_PRIVATE_CARGUMENTS DECLARE_IDSCALARWAVEMOL_PUBLIC_CARGUMENTS

#define IDSCALARWAVEMOL_C2F_PROTO _CCTK_C2F_PROTO, IDSCALARWAVEMOL_PRIVATE_C2F_PROTO, IDSCALARWAVEMOL_PUBLIC_C2F_PROTO

#define PASS_IDSCALARWAVEMOL_C2F(GH) _PASS_CCTK_C2F(GH), PASS_IDSCALARWAVEMOL_PRIVATE_C2F(GH), PASS_IDSCALARWAVEMOL_PUBLIC_C2F(GH)

#define DECLARE_IDSCALARWAVEMOL_C2F _DECLARE_CCTK_C2F DECLARE_IDSCALARWAVEMOL_PRIVATE_C2F DECLARE_IDSCALARWAVEMOL_PUBLIC_C2F

#define INITIALISE_IDSCALARWAVEMOL_C2F _INITIALISE_CCTK_C2F INITIALISE_IDSCALARWAVEMOL_PRIVATE_C2F INITIALISE_IDSCALARWAVEMOL_PUBLIC_C2F

#define IDSCALARWAVEMOL_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
