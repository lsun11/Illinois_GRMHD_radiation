/*@@
   @header  OS_collapse_CParameters.h
   @author  Automatically generated by CreateParameterBindings.pl
   @desc
            Declares parameters of thorn OS_collapse
   @enddesc
 @@*/


#ifndef _OS_COLLAPSE_PARAMETERS_H_
#define _OS_COLLAPSE_PARAMETERS_H_ 1

#include "ParameterCGlobal.h"
#include "ParameterCPrivateOS_COLLAPSE.h"
#include "ParameterCRestrictedDIAGNOSTICS_MHD.h"
#include "ParameterCRestrictedDIAGNOSTICS_VACUUM.h"
#include "ParameterCRestrictedDRIVER.h"
#include "ParameterCRestrictedGW_EXTRACTION.h"
#include "ParameterCRestrictedIO.h"
#include "ParameterCRestrictedLAPSE.h"
#include "ParameterCRestrictedMHD_EVOLVE.h"
#include "ParameterCRestrictedSHIFT.h"

#define DECLARE_CCTK_PARAMETERS \
  DECLARE_GLOBAL_PARAMETER_STRUCT_PARAMS \
  DECLARE_PRIVATE_OS_COLLAPSE_STRUCT_PARAMS \
  CCTK_INT const N_rad_ray = RESTRICTED_DIAGNOSTICS_MHD_STRUCT.N_rad_ray; \
  CCTK_REAL const rhosurf_rmin = RESTRICTED_DIAGNOSTICS_MHD_STRUCT.rhosurf_rmin; \
  CCTK_REAL const rhosurf_rmax = RESTRICTED_DIAGNOSTICS_MHD_STRUCT.rhosurf_rmax; \
  CCTK_REAL const surf_radius = RESTRICTED_DIAGNOSTICS_VACUUM_STRUCT.surf_radius; \
  CCTK_INT const scaledsurf = RESTRICTED_DIAGNOSTICS_VACUUM_STRUCT.scaledsurf; \
  CCTK_REAL const rbr = RESTRICTED_DIAGNOSTICS_VACUUM_STRUCT.rbr; \
  CCTK_REAL const drbdr = RESTRICTED_DIAGNOSTICS_VACUUM_STRUCT.drbdr; \
  CCTK_REAL const ddrbddr = RESTRICTED_DIAGNOSTICS_VACUUM_STRUCT.ddrbddr; \
  CCTK_INT const nsurf = RESTRICTED_DIAGNOSTICS_VACUUM_STRUCT.nsurf; \
  CCTK_INT const arithsurf = RESTRICTED_DIAGNOSTICS_VACUUM_STRUCT.arithsurf; \
  CCTK_REAL const rsurf2 = RESTRICTED_DIAGNOSTICS_VACUUM_STRUCT.rsurf2; \
  CCTK_INT const N_theta = RESTRICTED_DIAGNOSTICS_VACUUM_STRUCT.N_theta; \
  CCTK_INT const N_phi = RESTRICTED_DIAGNOSTICS_VACUUM_STRUCT.N_phi; \
  CCTK_INT const sym_factor = RESTRICTED_DIAGNOSTICS_VACUUM_STRUCT.sym_factor; \
  CCTK_REAL const theta_GW = RESTRICTED_GW_EXTRACTION_STRUCT.theta_GW; \
  CCTK_REAL const phi_GW = RESTRICTED_GW_EXTRACTION_STRUCT.phi_GW; \
  CCTK_INT const out_every = RESTRICTED_IO_STRUCT.out_every; \
  const char * const slicing_type = RESTRICTED_LAPSE_STRUCT.slicing_type; \
  CCTK_INT const opl_advect_enable = RESTRICTED_LAPSE_STRUCT.opl_advect_enable; \
  CCTK_INT const opl_a0lap = RESTRICTED_LAPSE_STRUCT.opl_a0lap; \
  CCTK_INT const opl_alap = RESTRICTED_LAPSE_STRUCT.opl_alap; \
  CCTK_REAL const rho_b_atm = RESTRICTED_MHD_EVOLVE_STRUCT.rho_b_atm; \
  CCTK_REAL const rho_fact = RESTRICTED_MHD_EVOLVE_STRUCT.rho_fact; \
  CCTK_REAL const tau_atm = RESTRICTED_MHD_EVOLVE_STRUCT.tau_atm; \
  CCTK_REAL const tau_fact = RESTRICTED_MHD_EVOLVE_STRUCT.tau_fact; \
  CCTK_REAL const P_fact = RESTRICTED_MHD_EVOLVE_STRUCT.P_fact; \
  CCTK_INT const neos = RESTRICTED_MHD_EVOLVE_STRUCT.neos; \
  CCTK_REAL const pfloor = RESTRICTED_MHD_EVOLVE_STRUCT.pfloor; \
  CCTK_REAL const gamma_th = RESTRICTED_MHD_EVOLVE_STRUCT.gamma_th; \
  CCTK_INT const eps_flag = RESTRICTED_MHD_EVOLVE_STRUCT.eps_flag; \
  CCTK_REAL const Sym_Bz = RESTRICTED_MHD_EVOLVE_STRUCT.Sym_Bz; \
  CCTK_REAL const K_poly = RESTRICTED_MHD_EVOLVE_STRUCT.K_poly; \
  CCTK_INT const Spatial_Gauge = RESTRICTED_SHIFT_STRUCT.Spatial_Gauge; \
  enum { \
      dummy_DIAGNOSTICS_MHD_N_rad_ray = sizeof( N_rad_ray ) \
    , dummy_DIAGNOSTICS_MHD_rhosurf_rmin = sizeof( rhosurf_rmin ) \
    , dummy_DIAGNOSTICS_MHD_rhosurf_rmax = sizeof( rhosurf_rmax ) \
    , dummy_DIAGNOSTICS_VACUUM_surf_radius = sizeof( surf_radius ) \
    , dummy_DIAGNOSTICS_VACUUM_scaledsurf = sizeof( scaledsurf ) \
    , dummy_DIAGNOSTICS_VACUUM_rbr = sizeof( rbr ) \
    , dummy_DIAGNOSTICS_VACUUM_drbdr = sizeof( drbdr ) \
    , dummy_DIAGNOSTICS_VACUUM_ddrbddr = sizeof( ddrbddr ) \
    , dummy_DIAGNOSTICS_VACUUM_nsurf = sizeof( nsurf ) \
    , dummy_DIAGNOSTICS_VACUUM_arithsurf = sizeof( arithsurf ) \
    , dummy_DIAGNOSTICS_VACUUM_rsurf2 = sizeof( rsurf2 ) \
    , dummy_DIAGNOSTICS_VACUUM_N_theta = sizeof( N_theta ) \
    , dummy_DIAGNOSTICS_VACUUM_N_phi = sizeof( N_phi ) \
    , dummy_DIAGNOSTICS_VACUUM_sym_factor = sizeof( sym_factor ) \
    , dummy_GW_EXTRACTION_theta_GW = sizeof( theta_GW ) \
    , dummy_GW_EXTRACTION_phi_GW = sizeof( phi_GW ) \
    , dummy_IO_out_every = sizeof( out_every ) \
    , dummy_LAPSE_slicing_type = sizeof( slicing_type ) \
    , dummy_LAPSE_opl_advect_enable = sizeof( opl_advect_enable ) \
    , dummy_LAPSE_opl_a0lap = sizeof( opl_a0lap ) \
    , dummy_LAPSE_opl_alap = sizeof( opl_alap ) \
    , dummy_MHD_EVOLVE_rho_b_atm = sizeof( rho_b_atm ) \
    , dummy_MHD_EVOLVE_rho_fact = sizeof( rho_fact ) \
    , dummy_MHD_EVOLVE_tau_atm = sizeof( tau_atm ) \
    , dummy_MHD_EVOLVE_tau_fact = sizeof( tau_fact ) \
    , dummy_MHD_EVOLVE_P_fact = sizeof( P_fact ) \
    , dummy_MHD_EVOLVE_neos = sizeof( neos ) \
    , dummy_MHD_EVOLVE_pfloor = sizeof( pfloor ) \
    , dummy_MHD_EVOLVE_gamma_th = sizeof( gamma_th ) \
    , dummy_MHD_EVOLVE_eps_flag = sizeof( eps_flag ) \
    , dummy_MHD_EVOLVE_Sym_Bz = sizeof( Sym_Bz ) \
    , dummy_MHD_EVOLVE_K_poly = sizeof( K_poly ) \
    , dummy_SHIFT_Spatial_Gauge = sizeof( Spatial_Gauge ) \
  };

#endif  /* _OS_COLLAPSE_PARAMETERS_H_ */

