/*@@
   @header  scalarwaveMoL_arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn scalarwaveMoL
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_SCALARWAVEMOL_PRIVATE_FARGUMENTS \


#define SCALARWAVEMOL_PRIVATE_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_SCALARWAVEMOL_PRIVATE_CARGUMENTS \


#define DECLARE_SCALARWAVEMOL_PRIVATE_C2F \


#define INITIALISE_SCALARWAVEMOL_PRIVATE_C2F \


#define SCALARWAVEMOL_PRIVATE_C2F_PROTO \


#define PASS_SCALARWAVEMOL_PRIVATE_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_SCALARWAVEMOL_PROTECTED_FARGUMENTS \
INTEGER X0scalarMoLanalytic&&\
INTEGER X0scalarMoLevolve&&\
INTEGER X0scalarMoLrhs&&\
INTEGER X0scalarMoLstagger&&\
INTEGER X0scalarMoLstaggerrhs&&\
INTEGER X0scawave_have_global_boundary&&\
INTEGER X1scalarMoLanalytic&&\
INTEGER X1scalarMoLevolve&&\
INTEGER X1scalarMoLrhs&&\
INTEGER X1scalarMoLstagger&&\
INTEGER X1scalarMoLstaggerrhs&&\
INTEGER X1scawave_have_global_boundary&&\
INTEGER X2scalarMoLanalytic&&\
INTEGER X2scalarMoLevolve&&\
INTEGER X2scalarMoLrhs&&\
INTEGER X2scalarMoLstagger&&\
INTEGER X2scalarMoLstaggerrhs&&\
CCTK_REAL phi(X0scalarMoLevolve,X1scalarMoLevolve,X2scalarMoLevolve)&&\
CCTK_REAL phi_p(X0scalarMoLevolve,X1scalarMoLevolve,X2scalarMoLevolve)&&\
CCTK_REAL phi_p_p(X0scalarMoLevolve,X1scalarMoLevolve,X2scalarMoLevolve)&&\
CCTK_REAL phi_analytic(X0scalarMoLanalytic,X1scalarMoLanalytic,X2scalarMoLanalytic)&&\
CCTK_REAL phi_analytic_minus_numeric(X0scalarMoLanalytic,X1scalarMoLanalytic,X2scalarMoLanalytic)&&\
CCTK_REAL phi_rhs(X0scalarMoLrhs,X1scalarMoLrhs,X2scalarMoLrhs)&&\
CCTK_REAL phi_stagger(X0scalarMoLstagger,X1scalarMoLstagger,X2scalarMoLstagger)&&\
CCTK_REAL phi_stagger_p(X0scalarMoLstagger,X1scalarMoLstagger,X2scalarMoLstagger)&&\
CCTK_REAL phi_stagger_p_p(X0scalarMoLstagger,X1scalarMoLstagger,X2scalarMoLstagger)&&\
CCTK_REAL phi_stagger_analytic_minus_numeric(X0scalarMoLanalytic,X1scalarMoLanalytic,X2scalarMoLanalytic)&&\
CCTK_REAL phi_stagger_rhs(X0scalarMoLstaggerrhs,X1scalarMoLstaggerrhs,X2scalarMoLstaggerrhs)&&\
CCTK_REAL phidot(X0scalarMoLevolve,X1scalarMoLevolve,X2scalarMoLevolve)&&\
CCTK_REAL phidot_p(X0scalarMoLevolve,X1scalarMoLevolve,X2scalarMoLevolve)&&\
CCTK_REAL phidot_p_p(X0scalarMoLevolve,X1scalarMoLevolve,X2scalarMoLevolve)&&\
CCTK_REAL phidot_rhs(X0scalarMoLrhs,X1scalarMoLrhs,X2scalarMoLrhs)&&\
CCTK_REAL phidot_stagger(X0scalarMoLstagger,X1scalarMoLstagger,X2scalarMoLstagger)&&\
CCTK_REAL phidot_stagger_p(X0scalarMoLstagger,X1scalarMoLstagger,X2scalarMoLstagger)&&\
CCTK_REAL phidot_stagger_p_p(X0scalarMoLstagger,X1scalarMoLstagger,X2scalarMoLstagger)&&\
CCTK_REAL phidot_stagger_rhs(X0scalarMoLstaggerrhs,X1scalarMoLstaggerrhs,X2scalarMoLstaggerrhs)&&\
CCTK_INT scawave_have_bdry_max(X0scawave_have_global_boundary,X1scawave_have_global_boundary)&&\
CCTK_INT scawave_have_bdry_min(X0scawave_have_global_boundary,X1scawave_have_global_boundary)&&\


#define SCALARWAVEMOL_PROTECTED_FARGUMENTS \
X0scalarMoLanalytic,X0scalarMoLevolve,X0scalarMoLrhs,X0scalarMoLstagger,X0scalarMoLstaggerrhs,X0scawave_have_global_boundary,X1scalarMoLanalytic,X1scalarMoLevolve,X1scalarMoLrhs,X1scalarMoLstagger,X1scalarMoLstaggerrhs,X1scawave_have_global_boundary,X2scalarMoLanalytic,X2scalarMoLevolve,X2scalarMoLrhs,X2scalarMoLstagger,X2scalarMoLstaggerrhs,phi,phi_p,phi_p_p,phi_analytic,phi_analytic_minus_numeric,phi_rhs,phi_stagger,phi_stagger_p,phi_stagger_p_p,phi_stagger_analytic_minus_numeric,phi_stagger_rhs,phidot,phidot_p,phidot_p_p,phidot_rhs,phidot_stagger,phidot_stagger_p,phidot_stagger_p_p,phidot_stagger_rhs,scawave_have_bdry_max,scawave_have_bdry_min

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_SCALARWAVEMOL_PROTECTED_CARGUMENTS \
CCTK_REAL * CCTK_RESTRICT phi = (cctki_dummy_int = &phi - &phi, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "SCALARWAVEMOL", "phi")); \
CCTK_REAL * CCTK_RESTRICT phi_p = (cctki_dummy_int = &phi_p - &phi_p, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 1, "SCALARWAVEMOL", "phi")); \
CCTK_REAL * CCTK_RESTRICT phi_p_p = (cctki_dummy_int = &phi_p_p - &phi_p_p, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 2, "SCALARWAVEMOL", "phi")); \
CCTK_REAL * CCTK_RESTRICT phi_analytic = (cctki_dummy_int = &phi_analytic - &phi_analytic, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "SCALARWAVEMOL", "phi_analytic")); \
CCTK_REAL * CCTK_RESTRICT phi_analytic_minus_numeric = (cctki_dummy_int = &phi_analytic_minus_numeric - &phi_analytic_minus_numeric, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "SCALARWAVEMOL", "phi_analytic_minus_numeric")); \
CCTK_REAL * CCTK_RESTRICT phi_rhs = (cctki_dummy_int = &phi_rhs - &phi_rhs, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "SCALARWAVEMOL", "phi_rhs")); \
CCTK_REAL * CCTK_RESTRICT phi_stagger = (cctki_dummy_int = &phi_stagger - &phi_stagger, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "SCALARWAVEMOL", "phi_stagger")); \
CCTK_REAL * CCTK_RESTRICT phi_stagger_p = (cctki_dummy_int = &phi_stagger_p - &phi_stagger_p, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 1, "SCALARWAVEMOL", "phi_stagger")); \
CCTK_REAL * CCTK_RESTRICT phi_stagger_p_p = (cctki_dummy_int = &phi_stagger_p_p - &phi_stagger_p_p, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 2, "SCALARWAVEMOL", "phi_stagger")); \
CCTK_REAL * CCTK_RESTRICT phi_stagger_analytic_minus_numeric = (cctki_dummy_int = &phi_stagger_analytic_minus_numeric - &phi_stagger_analytic_minus_numeric, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "SCALARWAVEMOL", "phi_stagger_analytic_minus_numeric")); \
CCTK_REAL * CCTK_RESTRICT phi_stagger_rhs = (cctki_dummy_int = &phi_stagger_rhs - &phi_stagger_rhs, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "SCALARWAVEMOL", "phi_stagger_rhs")); \
CCTK_REAL * CCTK_RESTRICT phidot = (cctki_dummy_int = &phidot - &phidot, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "SCALARWAVEMOL", "phidot")); \
CCTK_REAL * CCTK_RESTRICT phidot_p = (cctki_dummy_int = &phidot_p - &phidot_p, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 1, "SCALARWAVEMOL", "phidot")); \
CCTK_REAL * CCTK_RESTRICT phidot_p_p = (cctki_dummy_int = &phidot_p_p - &phidot_p_p, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 2, "SCALARWAVEMOL", "phidot")); \
CCTK_REAL * CCTK_RESTRICT phidot_rhs = (cctki_dummy_int = &phidot_rhs - &phidot_rhs, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "SCALARWAVEMOL", "phidot_rhs")); \
CCTK_REAL * CCTK_RESTRICT phidot_stagger = (cctki_dummy_int = &phidot_stagger - &phidot_stagger, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "SCALARWAVEMOL", "phidot_stagger")); \
CCTK_REAL * CCTK_RESTRICT phidot_stagger_p = (cctki_dummy_int = &phidot_stagger_p - &phidot_stagger_p, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 1, "SCALARWAVEMOL", "phidot_stagger")); \
CCTK_REAL * CCTK_RESTRICT phidot_stagger_p_p = (cctki_dummy_int = &phidot_stagger_p_p - &phidot_stagger_p_p, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 2, "SCALARWAVEMOL", "phidot_stagger")); \
CCTK_REAL * CCTK_RESTRICT phidot_stagger_rhs = (cctki_dummy_int = &phidot_stagger_rhs - &phidot_stagger_rhs, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "SCALARWAVEMOL", "phidot_stagger_rhs")); \
CCTK_INT * CCTK_RESTRICT scawave_have_bdry_max = (cctki_dummy_int = &scawave_have_bdry_max - &scawave_have_bdry_max, (CCTK_INT *) CCTKi_VarDataPtr(cctkGH, 0, "SCALARWAVEMOL", "scawave_have_bdry_max")); \
CCTK_INT * CCTK_RESTRICT scawave_have_bdry_min = (cctki_dummy_int = &scawave_have_bdry_min - &scawave_have_bdry_min, (CCTK_INT *) CCTKi_VarDataPtr(cctkGH, 0, "SCALARWAVEMOL", "scawave_have_bdry_min"));

#define DECLARE_SCALARWAVEMOL_PROTECTED_C2F \
static int CCTKARGNUM_phi = -1; \
static int CCTKGROUPNUM_scalarMoLevolve = -1; \
static int CCTKARGNUM_phi_analytic = -1; \
static int CCTKGROUPNUM_scalarMoLanalytic = -1; \
static int CCTKARGNUM_phi_analytic_minus_numeric = -1; \
static int CCTKARGNUM_phi_rhs = -1; \
static int CCTKGROUPNUM_scalarMoLrhs = -1; \
static int CCTKARGNUM_phi_stagger = -1; \
static int CCTKGROUPNUM_scalarMoLstagger = -1; \
static int CCTKARGNUM_phi_stagger_analytic_minus_numeric = -1; \
static int CCTKARGNUM_phi_stagger_rhs = -1; \
static int CCTKGROUPNUM_scalarMoLstaggerrhs = -1; \
static int CCTKARGNUM_phidot = -1; \
static int CCTKARGNUM_phidot_rhs = -1; \
static int CCTKARGNUM_phidot_stagger = -1; \
static int CCTKARGNUM_phidot_stagger_rhs = -1; \
static int CCTKARGNUM_scawave_have_bdry_max = -1; \
static int CCTKGROUPNUM_scawave_have_global_boundary = -1; \
static int CCTKARGNUM_scawave_have_bdry_min = -1;

#define INITIALISE_SCALARWAVEMOL_PROTECTED_C2F \
if(CCTKARGNUM_phi == -1) CCTKARGNUM_phi = CCTK_VarIndex("scalarwaveMoL::phi"); \
if(CCTKGROUPNUM_scalarMoLevolve == -1) CCTKGROUPNUM_scalarMoLevolve = CCTK_GroupIndex("scalarwaveMoL::scalarMoLevolve"); \
if(CCTKARGNUM_phi_analytic == -1) CCTKARGNUM_phi_analytic = CCTK_VarIndex("scalarwaveMoL::phi_analytic"); \
if(CCTKGROUPNUM_scalarMoLanalytic == -1) CCTKGROUPNUM_scalarMoLanalytic = CCTK_GroupIndex("scalarwaveMoL::scalarMoLanalytic"); \
if(CCTKARGNUM_phi_analytic_minus_numeric == -1) CCTKARGNUM_phi_analytic_minus_numeric = CCTK_VarIndex("scalarwaveMoL::phi_analytic_minus_numeric"); \
if(CCTKARGNUM_phi_rhs == -1) CCTKARGNUM_phi_rhs = CCTK_VarIndex("scalarwaveMoL::phi_rhs"); \
if(CCTKGROUPNUM_scalarMoLrhs == -1) CCTKGROUPNUM_scalarMoLrhs = CCTK_GroupIndex("scalarwaveMoL::scalarMoLrhs"); \
if(CCTKARGNUM_phi_stagger == -1) CCTKARGNUM_phi_stagger = CCTK_VarIndex("scalarwaveMoL::phi_stagger"); \
if(CCTKGROUPNUM_scalarMoLstagger == -1) CCTKGROUPNUM_scalarMoLstagger = CCTK_GroupIndex("scalarwaveMoL::scalarMoLstagger"); \
if(CCTKARGNUM_phi_stagger_analytic_minus_numeric == -1) CCTKARGNUM_phi_stagger_analytic_minus_numeric = CCTK_VarIndex("scalarwaveMoL::phi_stagger_analytic_minus_numeric"); \
if(CCTKARGNUM_phi_stagger_rhs == -1) CCTKARGNUM_phi_stagger_rhs = CCTK_VarIndex("scalarwaveMoL::phi_stagger_rhs"); \
if(CCTKGROUPNUM_scalarMoLstaggerrhs == -1) CCTKGROUPNUM_scalarMoLstaggerrhs = CCTK_GroupIndex("scalarwaveMoL::scalarMoLstaggerrhs"); \
if(CCTKARGNUM_phidot == -1) CCTKARGNUM_phidot = CCTK_VarIndex("scalarwaveMoL::phidot"); \
if(CCTKARGNUM_phidot_rhs == -1) CCTKARGNUM_phidot_rhs = CCTK_VarIndex("scalarwaveMoL::phidot_rhs"); \
if(CCTKARGNUM_phidot_stagger == -1) CCTKARGNUM_phidot_stagger = CCTK_VarIndex("scalarwaveMoL::phidot_stagger"); \
if(CCTKARGNUM_phidot_stagger_rhs == -1) CCTKARGNUM_phidot_stagger_rhs = CCTK_VarIndex("scalarwaveMoL::phidot_stagger_rhs"); \
if(CCTKARGNUM_scawave_have_bdry_max == -1) CCTKARGNUM_scawave_have_bdry_max = CCTK_VarIndex("scalarwaveMoL::scawave_have_bdry_max"); \
if(CCTKGROUPNUM_scawave_have_global_boundary == -1) CCTKGROUPNUM_scawave_have_global_boundary = CCTK_GroupIndex("scalarwaveMoL::scawave_have_global_boundary"); \
if(CCTKARGNUM_scawave_have_bdry_min == -1) CCTKARGNUM_scawave_have_bdry_min = CCTK_VarIndex("scalarwaveMoL::scawave_have_bdry_min");

#define SCALARWAVEMOL_PROTECTED_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_INT *

#define PASS_SCALARWAVEMOL_PROTECTED_C2F(GH) \
PASS_GROUPSIZE(scalarMoLanalytic, 0),\
PASS_GROUPSIZE(scalarMoLevolve, 0),\
PASS_GROUPSIZE(scalarMoLrhs, 0),\
PASS_GROUPSIZE(scalarMoLstagger, 0),\
PASS_GROUPSIZE(scalarMoLstaggerrhs, 0),\
PASS_GROUPSIZE(scawave_have_global_boundary, 0),\
PASS_GROUPSIZE(scalarMoLanalytic, 1),\
PASS_GROUPSIZE(scalarMoLevolve, 1),\
PASS_GROUPSIZE(scalarMoLrhs, 1),\
PASS_GROUPSIZE(scalarMoLstagger, 1),\
PASS_GROUPSIZE(scalarMoLstaggerrhs, 1),\
PASS_GROUPSIZE(scawave_have_global_boundary, 1),\
PASS_GROUPSIZE(scalarMoLanalytic, 2),\
PASS_GROUPSIZE(scalarMoLevolve, 2),\
PASS_GROUPSIZE(scalarMoLrhs, 2),\
PASS_GROUPSIZE(scalarMoLstagger, 2),\
PASS_GROUPSIZE(scalarMoLstaggerrhs, 2),\
(CCTK_REAL *)(PASS_REFERENCE(phi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(phi, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(phi, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(phi_analytic, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(phi_analytic_minus_numeric, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(phi_rhs, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(phi_stagger, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(phi_stagger, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(phi_stagger, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(phi_stagger_analytic_minus_numeric, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(phi_stagger_rhs, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(phidot, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(phidot, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(phidot, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(phidot_rhs, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(phidot_stagger, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(phidot_stagger, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(phidot_stagger, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(phidot_stagger_rhs, 0)),\
(CCTK_INT *)(PASS_REFERENCE(scawave_have_bdry_max, 0)),\
(CCTK_INT *)(PASS_REFERENCE(scawave_have_bdry_min, 0))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_SCALARWAVEMOL_PUBLIC_FARGUMENTS \
INTEGER X0coordinates&&\
INTEGER X0radii&&\
INTEGER X1coordinates&&\
INTEGER X2coordinates&&\
INTEGER active_length&&\
INTEGER num_levels_length&&\
INTEGER positions_length&&\
INTEGER radii_length&&\
CCTK_INT active(active_length)&&\
CCTK_REAL coarse_dx&&\
CCTK_REAL coarse_dy&&\
CCTK_REAL coarse_dz&&\
CCTK_INT num_levels(num_levels_length)&&\
CCTK_REAL position_x(positions_length)&&\
CCTK_REAL position_y(positions_length)&&\
CCTK_REAL position_z(positions_length)&&\
CCTK_REAL r(X0coordinates,X1coordinates,X2coordinates)&&\
CCTK_REAL radius(X0radii,radii_length)&&\
CCTK_REAL x(X0coordinates,X1coordinates,X2coordinates)&&\
CCTK_REAL y(X0coordinates,X1coordinates,X2coordinates)&&\
CCTK_REAL z(X0coordinates,X1coordinates,X2coordinates)&&\


#define SCALARWAVEMOL_PUBLIC_FARGUMENTS \
X0coordinates,X0radii,X1coordinates,X2coordinates,active_length,num_levels_length,positions_length,radii_length,active,coarse_dx,coarse_dy,coarse_dz,num_levels,position_x,position_y,position_z,r,radius,x,y,z

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_SCALARWAVEMOL_PUBLIC_CARGUMENTS \
CCTK_INT * CCTK_RESTRICT active = (cctki_dummy_int = &active - &active, (CCTK_INT *) CCTKi_VarDataPtr(cctkGH, 0, "CARPETREGRID2", "active[0]")); \
CCTK_REAL * CCTK_RESTRICT coarse_dx = (cctki_dummy_int = &coarse_dx - &coarse_dx, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "coarse_dx")); \
CCTK_REAL * CCTK_RESTRICT coarse_dy = (cctki_dummy_int = &coarse_dy - &coarse_dy, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "coarse_dy")); \
CCTK_REAL * CCTK_RESTRICT coarse_dz = (cctki_dummy_int = &coarse_dz - &coarse_dz, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "coarse_dz")); \
CCTK_INT * CCTK_RESTRICT num_levels = (cctki_dummy_int = &num_levels - &num_levels, (CCTK_INT *) CCTKi_VarDataPtr(cctkGH, 0, "CARPETREGRID2", "num_levels[0]")); \
CCTK_REAL * CCTK_RESTRICT position_x = (cctki_dummy_int = &position_x - &position_x, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "CARPETREGRID2", "position_x[0]")); \
CCTK_REAL * CCTK_RESTRICT position_y = (cctki_dummy_int = &position_y - &position_y, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "CARPETREGRID2", "position_y[0]")); \
CCTK_REAL * CCTK_RESTRICT position_z = (cctki_dummy_int = &position_z - &position_z, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "CARPETREGRID2", "position_z[0]")); \
CCTK_REAL * CCTK_RESTRICT r = (cctki_dummy_int = &r - &r, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "r")); \
CCTK_REAL * CCTK_RESTRICT radius = (cctki_dummy_int = &radius - &radius, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "CARPETREGRID2", "radius[0]")); \
CCTK_REAL * CCTK_RESTRICT x = (cctki_dummy_int = &x - &x, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "x")); \
CCTK_REAL * CCTK_RESTRICT y = (cctki_dummy_int = &y - &y, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "y")); \
CCTK_REAL * CCTK_RESTRICT z = (cctki_dummy_int = &z - &z, (CCTK_REAL *) CCTKi_VarDataPtr(cctkGH, 0, "GRID", "z"));

#define DECLARE_SCALARWAVEMOL_PUBLIC_C2F \
static int CCTKARGNUM_active = -1; \
static int CCTKGROUPNUM_active = -1; \
static int CCTKARGNUM_coarse_dx = -1; \
static int CCTKGROUPNUM_gridspacings = -1; \
static int CCTKARGNUM_coarse_dy = -1; \
static int CCTKARGNUM_coarse_dz = -1; \
static int CCTKARGNUM_num_levels = -1; \
static int CCTKGROUPNUM_num_levels = -1; \
static int CCTKARGNUM_position_x = -1; \
static int CCTKGROUPNUM_positions = -1; \
static int CCTKARGNUM_position_y = -1; \
static int CCTKARGNUM_position_z = -1; \
static int CCTKARGNUM_r = -1; \
static int CCTKGROUPNUM_coordinates = -1; \
static int CCTKARGNUM_radius = -1; \
static int CCTKGROUPNUM_radii = -1; \
static int CCTKARGNUM_x = -1; \
static int CCTKARGNUM_y = -1; \
static int CCTKARGNUM_z = -1;

#define INITIALISE_SCALARWAVEMOL_PUBLIC_C2F \
if(CCTKARGNUM_active == -1) CCTKARGNUM_active = CCTK_VarIndex("CARPETREGRID2::active[0]"); \
if(CCTKGROUPNUM_active == -1) CCTKGROUPNUM_active = CCTK_GroupIndex("CARPETREGRID2::active"); \
if(CCTKARGNUM_coarse_dx == -1) CCTKARGNUM_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
if(CCTKGROUPNUM_gridspacings == -1) CCTKGROUPNUM_gridspacings = CCTK_GroupIndex("GRID::gridspacings"); \
if(CCTKARGNUM_coarse_dy == -1) CCTKARGNUM_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
if(CCTKARGNUM_coarse_dz == -1) CCTKARGNUM_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
if(CCTKARGNUM_num_levels == -1) CCTKARGNUM_num_levels = CCTK_VarIndex("CARPETREGRID2::num_levels[0]"); \
if(CCTKGROUPNUM_num_levels == -1) CCTKGROUPNUM_num_levels = CCTK_GroupIndex("CARPETREGRID2::num_levels"); \
if(CCTKARGNUM_position_x == -1) CCTKARGNUM_position_x = CCTK_VarIndex("CARPETREGRID2::position_x[0]"); \
if(CCTKGROUPNUM_positions == -1) CCTKGROUPNUM_positions = CCTK_GroupIndex("CARPETREGRID2::positions"); \
if(CCTKARGNUM_position_y == -1) CCTKARGNUM_position_y = CCTK_VarIndex("CARPETREGRID2::position_y[0]"); \
if(CCTKARGNUM_position_z == -1) CCTKARGNUM_position_z = CCTK_VarIndex("CARPETREGRID2::position_z[0]"); \
if(CCTKARGNUM_r == -1) CCTKARGNUM_r = CCTK_VarIndex("GRID::r"); \
if(CCTKGROUPNUM_coordinates == -1) CCTKGROUPNUM_coordinates = CCTK_GroupIndex("GRID::coordinates"); \
if(CCTKARGNUM_radius == -1) CCTKARGNUM_radius = CCTK_VarIndex("CARPETREGRID2::radius[0]"); \
if(CCTKGROUPNUM_radii == -1) CCTKGROUPNUM_radii = CCTK_GroupIndex("CARPETREGRID2::radii"); \
if(CCTKARGNUM_x == -1) CCTKARGNUM_x = CCTK_VarIndex("GRID::x"); \
if(CCTKARGNUM_y == -1) CCTKARGNUM_y = CCTK_VarIndex("GRID::y"); \
if(CCTKARGNUM_z == -1) CCTKARGNUM_z = CCTK_VarIndex("GRID::z");

#define SCALARWAVEMOL_PUBLIC_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,CCTK_INT *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *

#define PASS_SCALARWAVEMOL_PUBLIC_C2F(GH) \
PASS_GROUPSIZE(coordinates, 0),\
PASS_GROUPSIZE(radii, 0),\
PASS_GROUPSIZE(coordinates, 1),\
PASS_GROUPSIZE(coordinates, 2),\
PASS_GROUPLEN(CARPETREGRID2, active),\
PASS_GROUPLEN(CARPETREGRID2, num_levels),\
PASS_GROUPLEN(CARPETREGRID2, positions),\
PASS_GROUPLEN(CARPETREGRID2, radii),\
(CCTK_INT *)(PASS_REFERENCE(active, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dz, 0)),\
(CCTK_INT *)(PASS_REFERENCE(num_levels, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(position_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(position_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(position_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(r, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(z, 0))

#endif /* CCODE */

#ifdef FCODE
#define SCALARWAVEMOL_FARGUMENTS _CCTK_FARGUMENTS, SCALARWAVEMOL_PROTECTED_FARGUMENTS, SCALARWAVEMOL_PUBLIC_FARGUMENTS

#define DECLARE_SCALARWAVEMOL_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_SCALARWAVEMOL_PROTECTED_FARGUMENTS DECLARE_SCALARWAVEMOL_PUBLIC_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_SCALARWAVEMOL_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_SCALARWAVEMOL_PROTECTED_CARGUMENTS DECLARE_SCALARWAVEMOL_PUBLIC_CARGUMENTS

#define SCALARWAVEMOL_C2F_PROTO _CCTK_C2F_PROTO, SCALARWAVEMOL_PROTECTED_C2F_PROTO, SCALARWAVEMOL_PUBLIC_C2F_PROTO

#define PASS_SCALARWAVEMOL_C2F(GH) _PASS_CCTK_C2F(GH), PASS_SCALARWAVEMOL_PROTECTED_C2F(GH), PASS_SCALARWAVEMOL_PUBLIC_C2F(GH)

#define DECLARE_SCALARWAVEMOL_C2F _DECLARE_CCTK_C2F DECLARE_SCALARWAVEMOL_PROTECTED_C2F DECLARE_SCALARWAVEMOL_PUBLIC_C2F

#define INITIALISE_SCALARWAVEMOL_C2F _INITIALISE_CCTK_C2F INITIALISE_SCALARWAVEMOL_PROTECTED_C2F INITIALISE_SCALARWAVEMOL_PUBLIC_C2F

#define SCALARWAVEMOL_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
