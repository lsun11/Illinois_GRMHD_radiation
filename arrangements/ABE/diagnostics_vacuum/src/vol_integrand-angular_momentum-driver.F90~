!-------------------------------------
! Driver for the J integrand function
!-------------------------------------

#include "cctk.h"
#include "cctk_Arguments.h"
#include "cctk_Functions.h"
#include "cctk_Parameters.h"

subroutine angular_momentum_integrand(CCTK_ARGUMENTS)
  implicit none

  !~~~~~> Input parameters:
  DECLARE_CCTK_ARGUMENTS
  DECLARE_CCTK_PARAMETERS
  DECLARE_CCTK_FUNCTIONS

  !~~~~~> Other variables:
  real*8 :: dX,dY,dZ,zmaxx
  integer :: i,j,k,handle,vindex,ierr

  dX = CCTK_DELTA_SPACE(1)
  dY = CCTK_DELTA_SPACE(2)
  dZ = CCTK_DELTA_SPACE(3)

  if(MOD(cctk_iteration,Compute_VolIntegrands_Every)==0) then
     WhichIntegral = 2

     write(*,*) "J INTEGRAND",Z(1,1,cctk_lsh(3))

     !Reset VolIntegrand's quickly, using OpenMP
     !$omp parallel do
     do k=1,cctk_lsh(3)
        do j=1,cctk_lsh(2)
           do i=1,cctk_lsh(1)
              VolIntegrand(i,j,k) = 0.D0
              VolIntegrand2(i,j,k) = 0.D0
              VolIntegrand3(i,j,k) = 0.D0
           end do
        end do
     end do
     !$omp end parallel do

     call jdens_cpp(cctkGH,cctk_lsh,cctk_nghostzones, Symmetry, &
          VolIntegrand,  &
          dx,dy,dz, &
          X,Y,Z,  &
          phi, Sx, Sy, trK, &
          Axx, Axy, Axz, Ayy, Ayz, Azz,  &
          gupxx, gupxy, gupxz, gupyy, gupyz, gupzz)

     if(num_BHs.gt.0) then
        call excise_bhs_VolInt(CCTK_PASS_FTOF)
     end if

     !$omp parallel do
     do k = cctk_nghostzones(3)+1,cctk_lsh(3)-cctk_nghostzones(3)
        do j = cctk_nghostzones(2)+1,cctk_lsh(2)-cctk_nghostzones(2)
           do i = cctk_nghostzones(1)+1,cctk_lsh(1)-cctk_nghostzones(1)
              if(r(i,j,k).lt.inner_volInt_radius) then
                 VolIntegrand2(i,j,k) = VolIntegrand(i,j,k)
              end if
              if(r(i,j,k).lt.inner_volInt_radius*0.5D0) then
                 VolIntegrand3(i,j,k) = VolIntegrand(i,j,k)
              end if
           end do
        end do
     end do
     !$omp end parallel do

  end if

  print *,"Whichintegral at angular_momentum_integrand=",WhichIntegral 
end subroutine angular_momentum_integrand
