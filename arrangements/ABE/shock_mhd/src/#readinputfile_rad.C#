#include "cctk.h"
#include "cctk_Parameters.h"
#include "cctk_Arguments.h"

#include <stdio.h>
#include <math.h>
#include <iostream>
#include <iomanip>
//#include <sstream>                                                                                                                  
#include <stdlib.h>
#include <string.h>
#include <fstream>
#include "nrutil.h"

#include "Symmetry.h"

#include "rad.h"

extern "C" void radiationshock_readfiles(CCTK_ARGUMENTS)
{
  using namespace std;
  DECLARE_CCTK_ARGUMENTS;
  DECLARE_CCTK_PARAMETERS;

  //double *x, *rho0, *P, *ux, *E, *F, *tau;
  printf ("Start Reading Radiation Shock ID!!!! \n");
  //int NS = 200;
  
  double *x_ra, *rho0_ra, *P_ra, *ux_ra, *E_ra, *F_ra, *tau_ra;
  double *X_p, *P_b, *rho0_b, *ux_b, *vx_b, *E_b, *F_b, *tau_b;
  double *E_analy, *F_analy, *optd;

  x_ra = new double[NS];
  rho0_ra = new double[NS];
  P_ra = new double[NS];
  ux_ra = new double[NS];
  E_ra = new double[NS];
  F_ra = new double[NS];
  tau_ra = new double[NS];

  X_p = new double[NS];
  P_b = new double[NS];
  rho0_b = new double[NS];
  ux_b = new double[NS];  
  vx_b = new double[NS];
  E_b = new double[NS];
  F_b = new double[NS];  
  tau_b = new double[NS];

  E_analy = new double[NS];
  F_analy = new double[NS];
  optd = new double[NS];

  ifstream inputFile;
  inputFile.open("rad_shock_input.dat");

  int i = 0;

  while(!inputFile.eof())
    {
      inputFile >> x_ra[i] >> rho0_ra[i] >> P_ra[i] >> ux_ra[i]
		>> E_ra[i] >> F_ra[i] >> tau_ra[i];
      ++i;
    }

  inputFile.close();

  int istart = 0;
  int jstart = 0;
  int kstart = 0;
  int iend = cctk_lsh[0];
  int jend = cctk_lsh[1];
  int kend = cctk_lsh[2];
  double w_boost = 1.0/sqrt(1.0-u_boost*u_boost);


  printf("NS=%d, cctk_lsh[0],cctk_lsh[1],cctk_lsh[2]= %d, %d, %d ", NS, cctk_lsh[0],cctk_lsh[1],cctk_lsh[2]);
  printf(" rho0_ra[0]=%.16g,  rho0_ra[1]=%.16g,  rho0_ra[4]=%.16g,  rho0_ra[15]=%.16g, rho0_ra[50]=%.16g, rho0_ra[100]=%.16g\n", 
  	   rho0_ra[0], rho0_ra[1],rho0_ra[4],rho0_ra[15],rho0_ra[50],rho0_ra[100]);                                                                           

  if (rad_evolve_enable==1){
    // In radiation shock, LTE is hold only at left boundary initially. Compute a_R here: 
    *rad_const = E_ra[0]*(rho0_ra[0]/P_ra[0])*(rho0_ra[0]/P_ra[0])*(rho0_ra[0]/P_ra[0])*(rho0_ra[0]/P_ra[0]);
    printf("In readinputfile_rad.C, rad_const = %e, %e", rad_const, *rad_const);
    printf("rho0_ra[0]=%e, P_ra[0]=%e, E_ra[0]=%e", rho0_ra[0], P_ra[0], E_ra[0]);
  
    for (int i=istart; i<NS; i++){
      // tau here is measured from the shock front (x=0)
      optd[i] = rad_opacity_abs*rho0_ra[i]*x_ra[i];
      F_analy[i] = -E_ra[NS-1]*exp(-abs(optd[i])*sqrt(3.0))/(2.0*sqrt(3.0));

      if (x_ra[i] > 0.0){
	E_analy[i] = E_ra[NS-1]*(1.0-0.5*exp(-abs(optd[i])*sqrt(3.0))); 
    }
      else{
	E_analy[i] = E_ra[NS-1]*0.5*exp(-abs(optd[i])*sqrt(3.0)) + E_ra[0];
      }
      printf("i=%d, optd[i]=%e, rho0_ra[i]=%e, x_ra[i]=%e,E_analy[i]=%e, F_analy[i]=%e \n", i, optd[i], rho0_ra[i], x_ra[i], E_analy[i], F_analy[i]);
    
    }

      //write the computed analytic radiation variables into files.
    ofstream outputFile;
    outputFile.open("Shock_rad_analytic.dat");
    for (int i=istart; i<NS; i++){
      outputFile << x_ra[i] << " " << E_analy[i] << "  " << F_analy[i]<< "  " << optd[i] << endl ;
      }
    outputFile.close();

  }



  if (boost_shock==1){
    printf("start to boost the shock!!!");

    double dX = x_ra[1]-x_ra[0];


    for (int i=istart; i<NS; i++){
	  X_p[i] = x_ra[i]/w_boost;
	  printf("rho0_ra[53,54,55]=%e,%e,%e, X_p[53,54,55]=%e,%e,%e \n", rho0_ra[53], rho0_ra[54],rho0_ra[55],X_p[53], X_p[54],X_p[55]);
	  // Start linear interpolation for the boosted variables. 
	  if (x_ra[i] > 0.0){
	    P_b[i] = ((x_ra[i]-X_p[i])*P_ra[i-1] + (X_p[i]-x_ra[i-1])*P_ra[i])/dX;
	    rho0_b[i] = ((x_ra[i]-X_p[i])*rho0_ra[i-1] + (X_p[i]-x_ra[i-1])*rho0_ra[i])/dX; 
	    E_b[i] = ((x_ra[i]-X_p[i])*E_ra[i-1] + (X_p[i]-x_ra[i-1])*E_ra[i])/dX;
	    F_b[i] = ((x_ra[i]-X_p[i])*F_ra[i-1] + (X_p[i]-x_ra[i-1])*F_ra[i])/dX;
	    ux_b[i] = ((x_ra[i]-X_p[i])*ux_ra[i-1] + (X_p[i]-x_ra[i-1])*ux_ra[i])/dX;
	    vx_b[i] = ux_b[i]/sqrt(1.0 + ux_b[i]*ux_b[i]); 
	    tau_b[i] = ((x_ra[i]-X_p[i])*tau_ra[i-1] + (X_p[i]-x_ra[i-1])*tau_ra[i])/dX;
	  }
	  else{
	    P_b[i] = ((X_p[i]-x_ra[i])*P_ra[i+1] + (x_ra[i+1]-X_p[i])*P_ra[i])/dX; 
	    rho0_b[i] = ((X_p[i]-x_ra[i])*rho0_ra[i+1] + (x_ra[i+1]-X_p[i])*rho0_ra[i])/dX;
	    E_b[i] = ((X_p[i]-x_ra[i])*E_ra[i+1] + (x_ra[i+1]-X_p[i])*E_ra[i])/dX;
	    F_b[i] = ((X_p[i]-x_ra[i])*F_ra[i+1] + (x_ra[i+1]-X_p[i])*F_ra[i])/dX;
	    ux_b[i] = ((X_p[i]-x_ra[i])*ux_ra[i+1] + (x_ra[i+1]-X_p[i])*ux_ra[i])/dX;
	    vx_b[i] = ux_b[i]/sqrt(1.0 + ux_b[i]*ux_b[i]);
	    tau_b[i] = ((X_p[i]-x_ra[i])*tau_ra[i+1] + (x_ra[i+1]-X_p[i])*tau_ra[i])/dX;
	  }    
	  //	  printf ("check, i=%d, x_ra=%e, P_b=%e, P_ra=%e,  rho0_b=%e,  rho0_ra=%e \n", i, x_ra[i], P_b[i], P_ra[i],rho0_b[i],rho0_ra[i]);
    }


      
  }


  printf ("Start to fill in variables!!!!! \n");

  int pos_index;

for (int k=kstart; k<kend; k++) for (int j=jstart; j<jend; j++) for (int i=istart; i<iend; i++) {
	  int vindex = CCTK_GFINDEX3D(cctkGH,i,j,k);

	  // index that indicates the position of the variables
	  pos_index = getClosestIndex(x_ra, x_ra+NS-1, x[vindex]);


	  if (boost_shock==1){
	    rho_b[vindex] = rho0_b[pos_index];
	    P[vindex] = P_b[pos_index];
	    // v_x' = (vx+u_boost)/(1+v_x*u_boost) (in -1,1,1,1 metric!!!)
	    vx[vindex] =  (vx_b[pos_index]+u_boost)/(1.0+vx_b[pos_index]*u_boost);
	    E_rad[vindex] = E_b[pos_index];
	    F_radx[vindex] = F_b[pos_index]/(1.0-u_boost*u_boost);
	    tau[vindex] = tau_b[pos_index];
	  }
	  else{
	  rho_b[vindex] = rho0_ra[pos_index];
	  P[vindex] = P_ra[pos_index]; 
          vx[vindex] = ux_ra[pos_index]/sqrt(1.0+ux_ra[pos_index]*ux_ra[pos_index]);
          E_rad[vindex] = E_ra[pos_index];
          F_radx[vindex] = F_ra[pos_index];
          tau[vindex] = tau_ra[pos_index];
	  }

	  if (rad_evolve_enable==0){
	    E_rad[vindex] = 0.0;
	    F_radx[vindex] = 0.0;
	    tau[vindex] = 0.0;

	    
	    if (rho_b[vindex]==0.0){printf ("ZERO density found in readinputfile_rad.C, i,j,k=%d,%d,%d \n", i,j,k);}


	  }

    }


 printf ("End Reading Radiation Shock ID!!!! \n"); 

}


 




