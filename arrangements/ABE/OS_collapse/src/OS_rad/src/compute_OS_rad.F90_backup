!-----------------------------------------------------------------------------
!
! Set up matter field variables for hybrid EOS
!
!-----------------------------------------------------------------------------
subroutine compute_OS_rad_hybrid(ex, X, Y, Z, &
     neos,rho_tab,P_tab,eps_tab,k_tab,gamma_tab,gamma_th, &
     lapse, phi, shiftx, shifty, shiftz, &
     gxx, gxy, gxz, gyy, gyz, gzz, &
     rho, S, Sx, Sy, Sz, Sxx, Sxy, Sxz, Syy, Syz, Szz, &
     rho_star, tau, st_x, st_y, st_z,mhd_st_x, mhd_st_y, mhd_st_z, &
     P, w, vx, vy, vz, &
     rho_b, u0, h, rho_b_atm,PhysR,eps_flag,K_poly,n, &
     E_rad,F_rad0,F_radx,F_rady,F_radz,tau_rad,S_rad_x,S_rad_y,S_rad_z,Po4PiB,PoRho,rho_b_0,r_edge,rad_evolve_enable)
  implicit none
   interface 
    subroutine compute_pcold_epscold(rhob, P_cold, eps_cold, &
                neos,rho_tab,P_tab,eps_tab,k_tab,gamma_tab)
     implicit none
     integer :: neos
     real*8  :: rhob, P_cold, eps_cold
     real*8, dimension(neos) :: rho_tab,P_tab,eps_tab
     real*8, dimension(neos+1) :: k_tab, gamma_tab
    end subroutine compute_pcold_epscold
   end interface
!
! Input parameters:
!
  integer, dimension(3)                    :: ex
  integer				   :: neos
  real*8, dimension(neos)                  :: rho_tab,P_tab,eps_tab
  real*8, dimension(neos+1)                :: k_tab, gamma_tab
  real*8                                   :: rho_b_atm, gamma_th
  real*8                                   :: r_edge
  real*8, dimension(ex(1),ex(2),ex(3))     :: X,Y,Z
  real*8, dimension(ex(1),ex(2),ex(3))     :: lapse,phi,shiftx,shifty,shiftz
  real*8, dimension(ex(1),ex(2),ex(3))     :: gxx,gxy,gxz,gyy,gyz,gzz
  real*8, dimension(ex(1),ex(2),ex(3))     :: rho,S,Sx,Sy,Sz,PhysR
  real*8, dimension(ex(1),ex(2),ex(3))     :: Sxx,Sxy,Sxz,Syy,Syz,Szz
  real*8, dimension(ex(1),ex(2),ex(3))     :: rho_star,tau,st_x,st_y,st_z
  real*8, dimension(ex(1),ex(2),ex(3))     :: mhd_st_x,mhd_st_y,mhd_st_z
  real*8, dimension(ex(1),ex(2),ex(3))     :: P,w,vx,vy,vz,rho_b,u0,h
  real*8, dimension(ex(1),ex(2),ex(3))     :: E_rad,F_rad0,F_radx,F_rady,F_radz
  real*8, dimension(ex(1),ex(2),ex(3))     :: tau_rad,S_rad_x,S_rad_y,S_rad_z,F_rad
!
! Other variables:
!
  real*8                     :: rho0,Press,U,eps
  real*8                     :: u_x,u_y,u_z,alpha,mfac,psi6
  real*8                     :: pgxx,pgxy,pgxz,pgyy,pgyz,pgzz
  real*8                     :: fac2,w_scalar,p_met,betax,betay,betaz
  real*8                     :: gamma,v2,gamma2,v,ut,ux,uy
  integer                    :: i,j,k,l,m,MAT,eps_flag
  real*8                     :: R,cost,sint,R1,R2,phi1,phi2,u_r,t
  integer                    :: imin, jmin, kmin, imax, jmax, kmax
  real*8                     :: theta,enth,alpi,gami,K_poly,n,f1on
  real*8                     :: r_Cook,mu_Cook,v_Cook
  real*8                     :: HALF, ONE, PI, FOUR, F1o3
  real*8                     :: x1,x2,y1,y2
  real*8                     :: riso,A,B,lower,upper
  real*8                     :: P_cold, eps_cold, hm1,au0m1
  real*8                     :: Po4PiB,PoRho,rho_b_0,E_rad0
  integer                    :: rad_evolve_enable
  real*8                     :: width

  parameter(HALF = 0.5D0, ONE = 1.D0, F1o3 = 1.D0/3.D0, FOUR = 4.D0)
  PI = acos(-ONE)
!
! compute
!
  E_rad0=rho_b_0 * PoRho * 1.d0 / Po4PiB
  imin = lbound(rho,1)
  jmin = lbound(rho,2)
  kmin = lbound(rho,3)
  imax = ubound(rho,1)
  jmax = ubound(rho,2)
  kmax = ubound(rho,3)
  f1on = 1.d0/n
  do i = imin, imax 
     do j = jmin, jmax
        do k = kmin, kmax
           alpha = lapse(i,j,k) + ONE
           mfac  = exp(4.D0*phi(i,j,k))
           psi6  = exp(6.D0*phi(i,j,k))
           pgxx  = mfac*gxx(i,j,k)
           pgxy  = mfac*gxy(i,j,k)
           pgxz  = mfac*gxz(i,j,k)
           pgyy  = mfac*gyy(i,j,k)
           pgyz  = mfac*gyz(i,j,k)
           pgzz  = mfac*gzz(i,j,k)
           R    = sqrt(X(i,1,1)**2 + Y(1,j,1)**2 + Z(1,1,k)**2)
           riso = PhysR(i,j,k)
           cost = Z(1,1,k)/R
           sint = sqrt(1.D0 - cost**2)
           theta = acos(cost)

           rho0 = max(rho_b(i,j,k),rho_b_atm)

           betax = shiftx(i,j,k)
           betay = shifty(i,j,k)
           betaz = shiftz(i,j,k)
           
           !I don't know if this is correct or not 
            v=0.d0 
                         
           if (rho0>rho_b_atm) then                                             
              gamma = 1.d0/sqrt(1.d0 - v*v)                                       
              au0m1 = v*v/(1.d0-v*v+sqrt(1.d0-v*v))               
                                                                                     
           else                                    
              v=0.D0
              gamma = 1.D0                                                      
              au0m1 = 0.d0                                                      
           end if
          
           ut    = gamma/alpha
           u_x   = pgxx*ut*(vx(i,j,k) + betax) + pgxy*ut*(vy(i,j,k) + betay)
           u_y   = pgxy*ut*(vx(i,j,k) + betax) + pgyy*ut*(vy(i,j,k) + betay)
           u_z   = pgxz*ut*(vx(i,j,k) + betax) + pgyz*ut*(vy(i,j,k) + betay)
           call compute_pcold_epscold(rho0, P_cold, eps_cold, &
                     neos,rho_tab,P_tab,eps_tab,k_tab,gamma_tab)
      
           Press = P_cold 
           eps = eps_cold 
         !  write(*,*) "Press: ",Press
         !  write(*,*) "eps: ",eps
         !  write(*,*) "n: ",n
         !  write(*,*) "K_poly: ",K_poly

           ! Do you want to keep the original epsilon? 
           if (eps_flag == 1) then 
              write(*,*) "eps_flag is set"
              eps = K_poly*n*rho0**f1on
              Press = P_cold + (gamma_th-1.d0)*rho0*(eps-eps_cold)
	   end if
          
           hm1 = eps + Press/rho0
           enth = 1.D0 + hm1
           fac2       = rho0*enth*gamma*gamma
           h(i,j,k)         = enth
           rho(i,j,k)       = fac2 - Press
           
           !check this stuff
           S(i,j,k)         = 3.D0*Press + enth*rho0*(gamma + 1.D0)*au0m1
          ! S(i,j,k) = 0.d0
           Sx(i,j,k)        = rho0*enth*gamma*u_x                              
           Sy(i,j,k)        = rho0*enth*gamma*u_y
           Sz(i,j,k)        = rho0*enth*gamma*u_z
           Sxx(i,j,k)       = Press*pgxx + rho0*enth*u_x*u_x
           Sxy(i,j,k)       = Press*pgxy + rho0*enth*u_x*u_y
           Sxz(i,j,k)       = Press*pgxz + rho0*enth*u_x*u_z
           Syy(i,j,k)       = Press*pgyy + rho0*enth*u_y*u_y
           Syz(i,j,k)       = Press*pgyz + rho0*enth*u_y*u_z
           Szz(i,j,k)       = Press*pgzz + rho0*enth*u_z*u_z
           rho_star(i,j,k)  = ut*alpha*psi6*rho0
           st_x(i,j,k)      = rho_star(i,j,k)*enth*u_x
           st_y(i,j,k)      = rho_star(i,j,k)*enth*u_y
           st_z(i,j,k)      = rho_star(i,j,k)*enth*u_z
           mhd_st_x(i,j,k)  =  st_x(i,j,k)
           mhd_st_y(i,j,k)  =  st_y(i,j,k)
           mhd_st_z(i,j,k)  =  st_z(i,j,k)
           P(i,j,k)         = Press
           w(i,j,k)         = rho_star(i,j,k)*gamma
           
           !radiation stuff
           width = 1.0
           if (rad_evolve_enable==0) then
              E_rad(i,j,k)     = 0.d0
           else 
              E_rad(i,j,k)     = Press/Po4PiB
           endif
           E_rad0 = rho_b_0 * PoRho / Po4PiB
           F_rad(i,j,k)        = 0.5*E_rad0*exp(-(riso-r_edge)**2/width)
           F_rad0(i,j,k)       = 0.d0
           F_radx(i,j,k)       = 0.d0
           F_rady(i,j,k)       = 0.d0
           F_radz(i,j,k)       = 0.d0
           tau_rad(i,j,k)      = psi6*E_rad(i,j,k)*F1o3*(FOUR*alpha*alpha*ut*ut-ONE)
           S_rad_x(i,j,k)      = 0.d0
           S_rad_y(i,j,k)      = 0.d0
           S_rad_z(i,j,k)      = 0.d0

! Use this for Font's energy variable 
           tau(i,j,k)       = (au0m1 + gamma*hm1)*rho_star(i,j,k) - psi6*Press
           u0(i,j,k)        = ut
           rho_b(i,j,k)     = rho0
         end do
     end do
  end do
  !write(*,*) "comp_mag_hyb: ",gxx(2,2,2)
end subroutine compute_OS_rad_hybrid



