#define NRANSI
#include "cctk.h"
#include "cctk_Parameters.h"
#include "cctk_Arguments.h"
#include <stdio.h>
#include <math.h>
#include <iostream.h>
#include <iomanip.h>
#include <stdlib.h>
#include <string.h>
#include <fstream.h>
#include "nr.h"
#include "nrutil.h"
#include "Symmetry.h"
#define N_INT 1000

static char *rcsid = "$Meow...$";
CCTK_FILEVERSION(OS_rad_initialdata)
  extern "C" void OS_rad_initialdata(CCTK_ARGUMENTS)
{
  DECLARE_CCTK_ARGUMENTS;
 DECLARE_CCTK_PARAMETERS;
  double n,k_eos;
  double rho_b_max;
  double time; 
  int mark,i,rpts_mat,l,m;
  long rpts;
  //read in from file
  double *rad,*A,*drdt,*rho_aux,*Sr,*Srr,*lapse,*shift;
  //derivs obtained from spline
  double *ddA,*dddrdt,*ddrho_aux,*ddSr,*ddSrr,*ddlapse,*ddshift;
  //there are two radii needed, the spherical radius sqrt(x^2+y^2+z^2), and the cylindrical radius sqrt(x^2+y^2).  We denote these rad_s and rad_c respectively.
  double rad_s,rad_c;
  //interpolated values
  double A_interp,drdt_interp,lapse_interp,shift_interp,rho_aux_interp,Sr_interp,Srr_interp;
  //some angles
  double sinthcosph, sinthsinph, costh;
  //metric quantities in spherical coords
  double **g_pol;
  //transform from spherical to cartesian
  double **trans;
  //some useful constants
  double HALF=0.5,ONE=1.0,ZERO=0.0,TEN=10.0,f3o16=3.0/16.0,f16o3=16.0/3.0;
 
  trans = dmatrix(1,4,1,4);
  g_pol = dmatrix(1,4,1,4);
  
  printf("test0\n");
 
  n=1.5;
 
  rho_b_max = 0.0;
  
  ifstream data_file;
  //This is a hardcoded filename.  VERY BAD.  Don't forget to fix
  data_file.open(OS_filename);
  data_file.read((char*)&rpts,sizeof(int));

  //Set up vectors
  rad = dvector(1,rpts);
  drdt = dvector(1,rpts);
  A = dvector(1,rpts);
  rho_aux = dvector(1,rpts);
  Sr = dvector(1,rpts);
  Srr = dvector(1,rpts);
  lapse = dvector(1,rpts);
  shift = dvector(1,rpts);
  ddA = dvector(1,rpts);
  dddrdt = dvector(1,rpts);                                                                                                                 
  ddrho_aux = dvector(1,rpts);
  ddSr = dvector(1,rpts);
  ddSrr = dvector(1,rpts);
  ddlapse = dvector(1,rpts);
  ddshift = dvector(1,rpts);
                                                                                                                           
  
  //read in initial data
  data_file.read((char*)&time,sizeof(double));
  for(i=1;i<=rpts;i++) {
    data_file.read((char*)&rad[i],sizeof(double));
    data_file.read((char*)&lapse[i],sizeof(double));
    data_file.read((char*)&shift[i],sizeof(double));
    data_file.read((char*)&rho_aux[i],sizeof(double));
    data_file.read((char*)&Sr[i],sizeof(double));
    data_file.read((char*)&Srr[i],sizeof(double));
    data_file.read((char*)&drdt[i],sizeof(double));
    data_file.read((char*)&A[i],sizeof(double));                                                                                             
    //  printf("%10.6e %10.6e %10.6e %10.6e %10.6e %10.6e %10.6e %10.6e\n",rad[i],lapse[i],shift[i],rho_aux[i],Sr[i],Srr[i],drdt[i],A[i]);
    /*
    //We are no longer assuming M=1, so we must rescale the radius.  
    rad[i]=rad[i]/M_PI*sqrt(f3o16/(Po4PiB*PoRho*PoRho*PoRho*RoM*RoM*RoM));
    rho_aux[i]=rho_aux[i]*M_PI*M_PI*f16o3*Po4PiB*PoRho*PoRho*PoRho*RoM*RoM*RoM;
    if (rho_aux[i] > rho_b_max)
    rho_b_max = rho_aux[i];
    Sr[i]=Sr[i]*M_PI*M_PI*f16o3*Po4PiB*PoRho*PoRho*PoRho*RoM*RoM*RoM;
    Srr[i]=Srr[i]*M_PI*M_PI*f16o3*Po4PiB*PoRho*PoRho*PoRho*RoM*RoM*RoM;
    printf("rad: %10.6e\n",rad[i]);
    */
    if (rho_aux[i] > rho_b_max)                                                                                                               
      rho_b_max = rho_aux[i];                                                                                                                         
    }
                                                                                                                             
  data_file.read((char*)&mark,sizeof(int));                                                                                            
if(mark != -62171)
    printf("DANGER! BAD MARK: %d\n",mark);                                                                                                  
  //spline
  spline(rad,A,rpts,0.0,1.e31,ddA);
  spline(rad,lapse,rpts,0.0,1.e31,ddlapse);
  spline(rad,shift,rpts,0.0,1.e31,ddshift);
  //
  // Now that we've read the matter in, we want to ditch the exterior:
  // it's zero and splining through the sudden drop-off causes severe
  // problems.
  //                                                                                                  
  rpts_mat = -1000;
  for(i=1;i<=rpts;i++) {
    ddrho_aux[i] = 0.0;
    ddSr[i] = 0.0;
    ddSrr[i] = 0.0;
    dddrdt[i] = 0.0;
    if (rho_aux[i] == 0.0 && rpts_mat == -1000)
      rpts_mat = i - 1;
  }

  // spline
  if(rpts_mat > 0) {
    spline(rad,rho_aux,rpts_mat,0.0,1.e31,ddrho_aux);
    spline(rad,Sr,rpts_mat,0.0,1.e31,ddSr);
    spline(rad,Srr,rpts_mat,0.0,1.e31,ddSrr);
    spline(rad,drdt,rpts_mat,0.0,1.e31,dddrdt);                                                                                              
  }

  int istart = 0;
  int jstart = 0;
  int kstart = 0;
  int iend = cctk_lsh[0];
  int jend = cctk_lsh[1];
  int kend = cctk_lsh[2];
  
  //loop over all gridpoints
  for (int k=kstart; k<kend; k++) for (int j=jstart; j<jend; j++) for (int i=istart; i<iend; i++) {
    
    int vindex = CCTK_GFINDEX3D(cctkGH,i,j,k);
    
    //set radii
    rad_s=sqrt(x[vindex]*x[vindex]+y[vindex]*y[vindex]+z[vindex]*z[vindex]);
    rad_c=sqrt(x[vindex]*x[vindex]+y[vindex]*y[vindex]);
    
    //do interpolations
    splint(rad,A,ddA,rpts,rad_s,&A_interp);
    splint(rad,lapse,ddlapse,rpts,rad_s,&lapse_interp);
    splint(rad,shift,ddshift,rpts,rad_s,&shift_interp);
    if (rad_s > rad[rpts_mat]){
      rho_aux_interp = 0.0;
      Sr_interp = 0.0;
      Srr_interp = 0.0;
      drdt_interp = 0.0;
    }
    else {
      splint(rad,rho_aux,ddrho_aux,rpts_mat,rad_s,&rho_aux_interp);
      splint(rad,Sr,ddSr,rpts_mat,rad_s,&Sr_interp);
      splint(rad,Srr,ddSrr,rpts_mat,rad_s,&Srr_interp);
      splint(rad,drdt,dddrdt,rpts_mat,rad_s,&drdt_interp);                                                                                        }

    //    printf("%10.6e %10.6e %10.6e %10.6e %10.6e %10.6e %10.6e %10.6e\n",rad_s,lapse_interp,shift_interp,rho_aux_interp,Sr_interp,Srr_interp,drdt_interp,A_interp);         
    //I set the following because I believe that in the case of OS_rad collapse, rho=rho_b=rho_star at t=0.  But I think I should check this more carefully.
    rho[vindex]=rho_aux_interp;
    rho_b[vindex]=rho_aux_interp;
    rho_star[vindex]=rho_aux_interp;
    
    //I'm not sure what I'm doing here
    // P[vindex]= .001;
    //vy[vindex]=0.0;
    
    //set angles
    sinthcosph = x[vindex]/rad_s;
    sinthsinph = y[vindex]/rad_s;
    costh = z[vindex]/rad_s;
   
 //I need to check to make sure this is correct                                                                                             
    vx[vindex] = drdt_interp*sinthcosph;
    vy[vindex] = drdt_interp*sinthsinph;
    vz[vindex] = drdt_interp*costh;
    
    //find various quantities in cartesian coords.  I'm not sure if it actually does anything to set Si and Sij here.  I think they get overwritten later anyway.
    Sx[vindex] = Sr_interp * sinthcosph;
    Sy[vindex] = Sr_interp * sinthsinph;
    Sz[vindex] = Sr_interp * costh;
    Sxx[vindex] = Srr_interp * sinthcosph * sinthcosph;
    Sxy[vindex] = Srr_interp * sinthcosph * sinthsinph;
    Sxz[vindex] = Srr_interp * sinthcosph * costh;
    Syy[vindex] = Srr_interp * sinthsinph * sinthsinph;
    Syz[vindex] = Srr_interp * sinthsinph * costh;
    Szz[vindex] = Srr_interp * costh * costh;
    
    shiftx[vindex] = shift_interp * sinthcosph;
    shifty[vindex] = shift_interp * sinthsinph;
    shiftz[vindex] = shift_interp * costh;
    
    lapm1[vindex] = lapse_interp-ONE;
    phi[vindex] = HALF * log(A_interp);
    
    
    //here we set up the metric in polar coords as a 4x4 matrix with indices ranging from 1 to 4, correspondint to time,rad_s,theta,phi
    g_pol[1][1] = -(lapse_interp + ONE)*(lapse_interp + ONE) + A_interp*A_interp*shift_interp*shift_interp;
    g_pol[1][2] = A_interp*A_interp*shift_interp;
    g_pol[1][3] = ZERO;
    g_pol[1][4] = ZERO;
    g_pol[2][1] = g_pol[1][2];
    g_pol[2][2] = A_interp*A_interp;
    g_pol[2][3] = ZERO;
    g_pol[2][4] = ZERO;
    g_pol[3][1] = ZERO;
    g_pol[3][2] = ZERO;
    g_pol[3][3] = A_interp*A_interp*rad_s*rad_s;
    g_pol[3][4] = ZERO;
    g_pol[4][1] = ZERO;
    g_pol[4][2] = ZERO;
    g_pol[4][3] = ZERO;
    g_pol[4][4] = A_interp*A_interp*rad_s*rad_s*(sinthcosph*sinthcosph+sinthsinph*sinthsinph);

    //find transformations matrix from spherical to cartesian
    trans[1][1] = ONE;
    trans[1][2] = ZERO;
    trans[1][3] = ZERO;
    trans[1][4] = ZERO;
    trans[2][1] = ZERO;
    trans[2][2] = x[vindex]/rad_s;
    trans[2][3] = y[vindex]/rad_s;
    trans[2][4] = z[vindex]/rad_s;
    trans[3][1] = ZERO;
    trans[3][2] = x[vindex]*z[vindex]/(rad_s*rad_s*rad_c);
    trans[3][3] = y[vindex]*z[vindex]/(rad_s*rad_s*rad_c);
    trans[3][4] = - rad_c/(rad_s*rad_s);
    trans[4][1] = ZERO;
    trans[4][2] = - y[vindex]/(rad_c*rad_c);
    trans[4][3] = x[vindex]/(rad_c*rad_c);
    trans[4][4] = ZERO;

    //find gij in cartesian
    gxx[vindex] = ZERO;
    for (l=1;l<=4;l++){
      for (m=1;m<=4;m++){
	gxx[vindex] = gxx[vindex]+trans[l][2]*trans[m][2]*g_pol[l][m];
      }
    }
    gxy[vindex] = ZERO;
    for (l=1;l<=4;l++){
      for (m=1;m<=4;m++){
	gxy[vindex] = gxy[vindex]+trans[l][2]*trans[m][3]*g_pol[l][m];
      }
    }
    gxz[vindex] = ZERO;
    for (l=1;l<=4;l++){
      for (m=1;m<=4;m++){
	gxz[vindex] = gxz[vindex]+trans[l][2]*trans[m][4]*g_pol[l][m];
      }
    }
    gyy[vindex] = ZERO; 
    for (l=1;l<=4;l++){
      for (m=1;m<=4;m++){
	gyy[vindex] = gyy[vindex]+trans[l][3]*trans[m][3]*g_pol[l][m];
      }
    }
    gyz[vindex] = ZERO;
    for (l=1;l<=4;l++){
      for (m=1;m<=4;m++){
	gyz[vindex] = gyz[vindex]+trans[l][3]*trans[m][4]*g_pol[l][m];
      }
    }
    gzz[vindex] = ZERO;
    for (l=1;l<=4;l++){
      for (m=1;m<=4;m++){
	gzz[vindex] = gzz[vindex]+trans[l][4]*trans[m][4]*g_pol[l][m];
      }
    }
    
    
    //Or we could just use the exact values
    // gxx[vindex]=ONE;
    //  gyy[vindex]=ONE;
    // gzz[vindex]=ONE;
    // gxy[vindex]=ZERO;
    // gxz[vindex]=ZERO;
    // gyz[vindex]=ZERO;


 
  }
  int vindex = CCTK_GFINDEX3D(cctkGH,1,1,1);
  //n
  Pr[CCTK_GFINDEX3D(cctkGH,0,0,0)] = n;
  //K_poly
  Pr[CCTK_GFINDEX3D(cctkGH,0,0,1)] = PoRho*pow(rho_b_max,-ONE/n) ;
  //kappaa
  //  Pr[CCTK_GFINDEX3D(cctkGH,0,0,2)] = opt_depth_a/(rho_b_max* RoM*ONE/M_PI*sqrt(f3o16*ONE/(Po4PiB*PoRho*PoRho*PoRho*RoM*RoM*RoM)));      
  //set it to be opt_depth_a/(rho_b*Radius)  here I assume Mass=1
  Pr[CCTK_GFINDEX3D(cctkGH,0,0,2)] = opt_depth_a/(rho_b_max* RoM);
  //kappas
  Pr[CCTK_GFINDEX3D(cctkGH,0,0,3)] = 0.0;
  
  k_eos= Pr[CCTK_GFINDEX3D(cctkGH,0,0,1)];

  //do EOS stuff
  
  //it seems that I need to set n.  This should be in the .par file, but I'll put it here for now:
  cout << "Can't open " << endl;
  cout << "Assuming polytropic EOS..." << endl;
  cout << "Polytropic index = " << n << endl;
  cout << "Polytropic constant K = " << k_eos << endl;
  //rho_tab = new double[1]; P_tab = new double[1]; eps_tab = new double[1];
  //gamma_tab = new double[2]; k_tab = new double[2];
  rho_tab[0] = 0.03;
  P_tab[0] = k_eos * pow(rho_tab[0],1.0+1.0/ n);
  eps_tab[0] = n*P_tab[0]/rho_tab[0];
  gamma_tab[0] = 1.0 + 1.0/ n; k_tab[0] = k_eos;
  gamma_tab[1] = 1.0 + 1.0/ n; k_tab[1] = k_eos;

  data_file.close();
	 
       
}




