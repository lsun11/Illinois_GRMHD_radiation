//-----------------------------------------------------------------------------
// Advect S_rad_i
//-----------------------------------------------------------------------------
#include "math.h"
#include "cctk.h"
#include "stdio.h"
#include "stdlib.h"

#define SQR(x) ((x) * (x))

extern "C" void CCTK_FCALL CCTK_FNAME(advect_Srad_cpp)
  (int *flux_direction, const cGH **cctkGH,int *cctk_lsh, int *nghostzones, int *Symmetry, 
   double *S_rad_x_rhs, double *S_rad_y_rhs, double *S_rad_z_rhs, 
   double *S_radx_flux, double *S_rady_flux, double *S_radz_flux, 
   double *dX,double *dY,double *dZ, double *S_radx_flux_x,  double *S_radx_flux_xp1);

extern "C" void advect_Srad_cpp(int flux_direction, const cGH *cctkGH,int *cctk_lsh, int *nghostzones, int Symmetry,
			     double *S_rad_x_rhs, double *S_rad_y_rhs, double *S_rad_z_rhs,
			     double *S_radx_flux, double *S_rady_flux, double *S_radz_flux,
			     double dX,double dY,double dZ, double *S_radx_flux_x,  double *S_radx_flux_xp1) {


  printf("START advect_Srad_cpp!!!!! \n");

  double sfpi = sqrt(4.0*M_PI);

  int AXISYM = 4;

  double f1o4pi = 1.0/(4.0*M_PI);

  /* Set up variables used in the grid loop for the physical grid points */

  int istart = 1;
  int jstart = 1;
  int kstart = 1;
  int iend = cctk_lsh[0] - 1;
  int jend = cctk_lsh[1] - 1;
  int kend = cctk_lsh[2] - 1;
 
  double dxi = 1.0/dX;
  double dyi = 1.0/dY;
  double dzi = 1.0/dZ;

  if(Symmetry==4) {
    jstart = 0;
    jend = cctk_lsh[1];
    jstart++;
    jend--;
  }
  

  if (Symmetry==AXISYM) {
    printf("RADIATION FIELD IS NOT SUPPORTED IN AXISYMMETRY RTGHT NOW!\n"); exit(1);
  }

  else  {
if (flux_direction==1) {
#pragma omp parallel for
      for(int k=kstart;k<kend;k++) for(int j=jstart;j<jend;j++) for(int i=istart;i<iend;i++) {
	int index   = CCTK_GFINDEX3D(cctkGH,i,  j,k);  
	int indexp1 = CCTK_GFINDEX3D(cctkGH,i+1,j,k);  
	int indexp2 = CCTK_GFINDEX3D(cctkGH,i+2,j,k);
	int indexm1 = CCTK_GFINDEX3D(cctkGH,i-1,j,k);
	double slope_x = (2.0*S_radx_flux[index]-S_radx_flux[indexp1]-S_radx_flux[indexm1])*(S_radx_flux[index]+S_radx_flux[indexp2]-2.0*S_radx_flux[indexp1]);
	  if(slope_x <=0.0){
	    S_rad_x_rhs[index] += (S_radx_flux[index]-S_radx_flux[indexp1])*dxi;	    
	  }
	  else{
	    S_rad_x_rhs[index] += 0.5*(S_radx_flux[indexm1]+S_radx_flux[indexp1]-S_radx_flux[index]-S_radx_flux[indexp2])*dxi;
	  } 
	  double slope_y = (2.0*S_rady_flux[index]-S_rady_flux[indexp1]-S_rady_flux[indexm1])*(S_rady_flux[index]+S_rady_flux[indexp2]-2.0*S_rady_flux[indexp1]);
	  if(slope_y <=0.0){
	     S_rad_y_rhs[index] += (S_rady_flux[index]-S_rady_flux[indexp1])*dxi;
	  }
	  else{
	     S_rad_y_rhs[index] += 0.5*(S_rady_flux[indexm1]+S_rady_flux[indexp1]-S_rady_flux[index]-S_rady_flux[indexp2])*dxi;
	  }
	  double slope_z = (2.0*S_radz_flux[index]-S_radz_flux[indexp1]-S_radz_flux[indexm1])*(S_radz_flux[index]+S_radz_flux[indexp2]-2.0*S_radz_flux[indexp2]);
	  if(slope_z <=0.0){
     	    S_rad_z_rhs[index] += (S_radz_flux[index]-S_radz_flux[indexp1])*dxi;	
	  }		
	  else{
	    S_rad_z_rhs[index] += 0.5*(S_radz_flux[indexm1]+S_radz_flux[indexp1]-S_radz_flux[index]-S_radz_flux[indexp2])*dxi;
          }

	S_radx_flux_x[index] = S_radx_flux[index];
	S_radx_flux_xp1[index] = S_radx_flux[indexp1];   

     }
 } else if (flux_direction==2) {   
#pragma omp parallel for
      for(int k=kstart;k<kend;k++) for(int j=jstart;j<jend;j++) for(int i=istart;i<iend;i++) {
	int index   = CCTK_GFINDEX3D(cctkGH,i,j,  k);
	int indexp1 = CCTK_GFINDEX3D(cctkGH,i,j+1,k);
        int indexp2 = CCTK_GFINDEX3D(cctkGH,i,j+2,k);
        int indexm1 = CCTK_GFINDEX3D(cctkGH,i,j-1,k);
        double slope_x = (2.0*S_radx_flux[index]-S_radx_flux[indexp1]-S_radx_flux[indexm1])*(S_radx_flux[index]+S_radx_flux[indexp2]-2.0*S_radx_flux[indexp1]);
          if(slope_x <=0.0){
            S_rad_x_rhs[index] += (S_radx_flux[index]-S_radx_flux[indexp1])*dyi;
          }
          else{
	    S_rad_x_rhs[index] += 0.5*(S_radx_flux[indexm1]+S_radx_flux[indexp1]-S_radx_flux[index]-S_radx_flux[indexp2])*dyi;
				       }
	  double slope_y = (2.0*S_rady_flux[index]-S_rady_flux[indexp1]-S_rady_flux[indexm1])*(S_rady_flux[index]+S_rady_flux[indexp2]-2.0*S_rady_flux[indexp1]);
	  if(slope_y <=0.0){
	    S_rad_y_rhs[index] += (S_rady_flux[index]-S_rady_flux[indexp1])*dyi;
	  }
	  else{
	    S_rad_y_rhs[index] += 0.5*(S_rady_flux[indexm1]+S_rady_flux[indexp1]-S_rady_flux[index]-S_rady_flux[indexp2])*dyi;
	  }
	  double slope_z = (2.0*S_radz_flux[index]-S_radz_flux[indexp1]-S_radz_flux[indexm1])*(S_radz_flux[index]+S_radz_flux[indexp2]-2.0*S_radz_flux[indexp2]);
	  if(slope_z <=0.0){
	    S_rad_z_rhs[index] += (S_radz_flux[index]-S_radz_flux[indexp1])*dyi;
	  }
	  else{
	    S_rad_z_rhs[index] += 0.5*(S_radz_flux[indexm1]+S_radz_flux[indexp1]-S_radz_flux[index]-S_radz_flux[indexp2])*dyi;
          }
	  }
  } else if (flux_direction==3) {
#pragma omp parallel for
    for(int k=kstart;k<kend;k++) for(int j=jstart;j<jend;j++) for(int i=istart;i<iend;i++) {
      int index   = CCTK_GFINDEX3D(cctkGH,i,j,k  );
      int indexp1 = CCTK_GFINDEX3D(cctkGH,i,j,k+1);
      int indexp2 = CCTK_GFINDEX3D(cctkGH,i,j,k+2);
      int indexm1 = CCTK_GFINDEX3D(cctkGH,i,j,k-1);
      
      double slope_x = (2.0*S_radx_flux[index]-S_radx_flux[indexp1]-S_radx_flux[indexm1])*(S_radx_flux[index]+S_radx_flux[indexp2]-2.0*S_radx_flux[indexp1]);
	if(slope_x <=0.0){
	  S_rad_x_rhs[index] += (S_radx_flux[index]-S_radx_flux[indexp1])*dzi;
	}
	else{
	  S_rad_x_rhs[index] += 0.5*(S_radx_flux[indexm1]+S_radx_flux[indexp1]-S_radx_flux[index]-S_radx_flux[indexp2])*dzi;				    }
      double slope_y = (2.0*S_rady_flux[index]-S_rady_flux[indexp1]-S_rady_flux[indexm1])*(S_rady_flux[index]+S_rady_flux[indexp2]-2.0*S_rady_flux[indexp1]);
        if(slope_y <=0.0){
	   S_rad_y_rhs[index] += (S_rady_flux[index]-S_rady_flux[indexp1])*dzi;
	}
        else{
	  S_rad_y_rhs[index] += 0.5*(S_rady_flux[indexm1]+S_rady_flux[indexp1]-S_rady_flux[index]-S_rady_flux[indexp2])*dzi;
       	 }
      double slope_z = (2.0*S_radz_flux[index]-S_radz_flux[indexp1]-S_radz_flux[indexm1])*(S_radz_flux[index]+S_radz_flux[indexp2]-2.0*S_radz_flux[indexp2]);
       if(slope_z <=0.0){
	   S_rad_z_rhs[index] += (S_radz_flux[index]-S_radz_flux[indexp1])*dzi;
	}
	else{
	  S_rad_z_rhs[index] += 0.5*(S_radz_flux[indexm1]+S_radz_flux[indexp1]-S_radz_flux[index]-S_radz_flux[indexp2])*dzi;      
	}
	}	   
    }
  }
}
	  



extern "C" void CCTK_FCALL CCTK_FNAME(advect_Srad_cpp)
  (int *flux_direction, const cGH **cctkGH,int *cctk_lsh, int *nghostzones, int *Symmetry,
   double *S_rad_x_rhs, double *S_rad_y_rhs, double *S_rad_z_rhs,
   double *S_radx_flux, double *S_rady_flux, double *S_radz_flux,
   double *dX,double *dY,double *dZ, double *S_radx_flux_x,  double *S_radx_flux_xp1)
{
  advect_Srad_cpp(*flux_direction,*cctkGH,cctk_lsh, nghostzones, *Symmetry,
	       S_rad_x_rhs,S_rad_y_rhs, S_rad_z_rhs,
	       S_radx_flux,S_rady_flux,S_radz_flux,	   
	       *dX,*dY,*dZ,S_radx_flux_x,S_radx_flux_xp1);
}
