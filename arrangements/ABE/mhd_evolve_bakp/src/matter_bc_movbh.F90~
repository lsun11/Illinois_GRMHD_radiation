subroutine matter_bc_mhd_movbh(ext, xc,yc,zc,bigP,RP,DR,X, Y, Z, &
     rho_star, tau, mhd_st_x, mhd_st_y, mhd_st_z, &
     st_x, st_y, st_z, &
     rho_b, P, vx, vy, vz, Bx, By, Bz, &
     w, h, u0, Ex, Ey, Ez, sbt, sbx, sby, sbz, &
     rho, Sx, Sy, Sz, Sxx, Sxy, Sxz, Syy, Syz, Szz, &
     phi, lapse, shiftx, shifty, shiftz, &
     gxx, gxy, gxz, gyy, gyz, gzz, &
     gupxx, gupxy, gupxz, gupyy, gupyz, gupzz, &
     Symmetry,bc, &
     neos, ergo_star, ergo_sigma, rho_tab, P_tab, eps_tab, k_tab, gamma_tab, gamma_th, rho_b_atm, &
     nvec,dvec,rhovec,Pvec,vvec,have_bdry_min,have_bdry_max)
  implicit none
  integer, dimension(3)                   :: ext,have_bdry_min,have_bdry_max
  real*8, dimension(ext(1),ext(2),ext(3)) :: X,Y,Z,RP,DR
  real*8, dimension(ext(1),ext(2),ext(3)) :: rho_star, tau, mhd_st_x, mhd_st_y, mhd_st_z
  real*8, dimension(ext(1),ext(2),ext(3)) :: st_x, st_y, st_z
  real*8, dimension(ext(1),ext(2),ext(3)) :: rho_b, P, vx, vy, vz, Bx, By, Bz
  real*8, dimension(ext(1),ext(2),ext(3)) :: w, h, u0, Ex, Ey, Ez, sbt, sbx, sby, sbz
  real*8, dimension(ext(1),ext(2),ext(3)) :: rho, Sx, Sy, Sz, Sxx, Sxy, Sxz, Syy, Syz, Szz
  real*8, dimension(ext(1),ext(2),ext(3)) :: phi, lapse, shiftx, shifty, shiftz
  real*8, dimension(ext(1),ext(2),ext(3)) :: gxx, gxy, gxz, gyy, gyz, gzz
  real*8, dimension(ext(1),ext(2),ext(3)) :: gupxx, gupxy, gupxz, gupyy, gupyz, gupzz
  integer                                 :: Symmetry
  integer                                 :: bc
  integer                                 :: neos,ergo_star
  real*8, dimension(neos)                 :: rho_tab,P_tab,eps_tab
  real*8, dimension(neos+1)               :: k_tab, gamma_tab
  real*8                                  :: rho_b_atm, gamma_th,ergo_sigma
  real*8 :: xc,yc,zc,dvec,lap,ph,xp,yp,zp,bigP,rhop,pp,vxp,vyp,vzp,rpp,drp
  integer :: nvec
  real*8, dimension(nvec) :: rhovec,Pvec,vvec
  integer                            :: i,j,k
  integer                            :: imin, jmin, kmin, imax, jmax, kmax
  real*8, parameter                  :: ZERO = 0.D0
  real*8, parameter                  :: TWO = 2.D0, THREE = 3.D0
  real*8                             :: nx,ny,nz
  integer                            :: NO_SYMM, EQUATORIAL, OCTANT
  integer                            :: PI_SYMM, AXISYM
  integer                            :: FREEZE, EXTRAP, PERIODIC, OUTF, COPY, QUAD
  integer                            :: PLANAR,MOVBH
  parameter(NO_SYMM = 0, EQUATORIAL = 1, OCTANT = 2, PI_SYMM = 3, AXISYM = 4)
  parameter(OUTF = 1, FREEZE = 2, COPY = 3, EXTRAP = 4, QUAD = 5, PLANAR = 6, MOVBH=7)

! Storage variables:
  integer, parameter                 :: m = 17
  real*8, dimension(m)               :: AUX
  real*8                             :: rho_bl, Pl, vxl, vyl, vzl, Bxl, Byl, Bzl
  real*8                             :: rho_sl, taul, mhd_st_xl, mhd_st_yl, mhd_st_zl
  real*8                             :: st_xl, st_yl, st_zl, wl, hl, u0l, Exl, Eyl, Ezl
  real*8			     :: E_radl,F_rad0l,F_radxl,F_radyl,F_radzl,P_radl
  real*8                             :: S_rad_xl, S_rad_yl, S_rad_zl
  real*8                             :: sbtl, sbxl, sbyl, sbzl, rhol, Sxl, Syl, Szl
  real*8                             :: Sxxl, Sxyl, Sxzl, Syyl, Syzl, Szzl

!
! Input translation
!
!  write(6,*)'rhos4:',rho_star(1,1,2),rho_star(48,48,3)
!  write(6,*)'rhob4:',rho_b(1,1,2),rho_b(48,48,3)
!  write(6,*)'vx4:',vx(1,1,2),vx(48,48,3)
!  write(6,*)'sxx4:',sxx(1,1,2),sxx(48,48,3)

  imin = lbound(tau,1)
  jmin = lbound(tau,2)
  kmin = lbound(tau,3)
  imax = ubound(tau,1)
  jmax = ubound(tau,2)
  kmax = ubound(tau,3)

  if(Symmetry.eq.AXISYM) then
     jmin=2
     jmax=2
  endif

  if(bc==MOVBH) then
 !    write(6,*)'have_bdry_max(1)==1:',have_bdry_max(1)==1
     if (have_bdry_max(1)==1) then
  !      write(6,*)'xp:',x(imax,jmin,kmin),xc
        xp=x(imax,jmin,kmin)
        do j=jmin,jmax
   !        if(j.eq.jmin)write(6,*)'yp:',xp,y(imax,j,kmin),yc
           yp=y(imax,j,kmin)
           do k=kmin,kmax
              zp=z(imax,j,k)
              lap=lapse(imax,j,k)
              ph=phi(imax,j,k)
              rpp=RP(imax,j,k)
              drp=DR(imax,j,k)
              call get_bound(xp,yp,zp,xc,yc,zc,rpp,drp, &
                   lap,ph,bigP,Symmetry, &
                   nvec,dvec,rhovec,Pvec,vvec,rhop,Pp,vxp,vyp,vzp)
!              if(j.eq.jmin.and.k.eq.kmin)write(6,*)'g_b:', &
!                   xp,yp,zp,lap,ph,bigP,Symmetry, &
!                   nvec,dvec,rhovec(1),Pvec(1),vvec(1),rhop,Pp,vxp,vyp,vzp

              rho_b(imax,j,k)=rhop
              P(imax,j,k)=Pp
              vx(imax,j,k)=vxp
              vy(imax,j,k)=vyp
              vz(imax,j,k)=vzp
           enddo
        enddo
     end if

     if (have_bdry_min(1)==1) then
        xp=x(imin,jmin,kmin)
        do j=jmin,jmax
           yp=y(imin,j,kmin)
           do k=kmin,kmax
              zp=z(imin,j,k)
              lap=lapse(imin,j,k)
              ph=phi(imin,j,k)
              rpp=RP(imin,j,k)
              drp=DR(imin,j,k)
              call get_bound(xp,yp,zp,xc,yc,zc,rpp,drp, &
                   lap,ph,bigP,Symmetry, &
                   nvec,dvec,rhovec,Pvec,vvec,rhop,Pp,vxp,vyp,vzp)
              rho_b(imin,j,k)=rhop
              P(imin,j,k)=Pp
              vx(imin,j,k)=vxp
              vy(imin,j,k)=vyp
              vz(imin,j,k)=vzp
           enddo
        enddo
     end if

     if (have_bdry_max(2)==1) then
        yp=y(imin,jmax,kmin)
        do i=imin,imax
           xp=x(i,jmax,kmin)
           do k=kmin,kmax
              zp=z(i,jmax,k)
              lap=lapse(i,jmax,k)
              ph=phi(i,jmax,k)
              rpp=RP(i,jmax,k)
              drp=DR(i,jmax,k)
              call get_bound(xp,yp,zp,xc,yc,zc,rpp,drp, &
                   lap,ph,bigP,Symmetry, &
                   nvec,dvec,rhovec,Pvec,vvec,rhop,Pp,vxp,vyp,vzp)
              rho_b(i,jmax,k)=rhop
              P(i,jmax,k)=Pp
              vx(i,jmax,k)=vxp
              vy(i,jmax,k)=vyp
              vz(i,jmax,k)=vzp
           enddo
        enddo
     end if

     if (have_bdry_min(2)==1) then
        yp=y(imin,jmin,kmin)
        do i=imin,imax
           xp=x(i,jmin,kmin)
           do k=kmin,kmax
              zp=z(i,jmin,k)
              lap=lapse(i,jmin,k)
              ph=phi(i,jmin,k)
              rpp=RP(i,jmin,k)
              drp=DR(i,jmin,k)
              call get_bound(xp,yp,zp,xc,yc,zc,rpp,drp, &
                   lap,ph,bigP,Symmetry, &
                   nvec,dvec,rhovec,Pvec,vvec,rhop,Pp,vxp,vyp,vzp)
              rho_b(i,jmin,k)=rhop
              P(i,jmin,k)=Pp
              vx(i,jmin,k)=vxp
              vy(i,jmin,k)=vyp
              vz(i,jmin,k)=vzp
           enddo
        enddo
     end if

     if (have_bdry_max(3)==1) then
        zp=z(imin,jmin,kmax)
        do i=imin,imax
           xp=x(i,jmin,kmax)
           do j=jmin,jmax
              yp=y(i,j,kmax)
              lap=lapse(i,j,kmax)
              ph=phi(i,j,kmax)
              rpp=RP(i,j,kmax)
              drp=DR(i,j,kmax)
              call get_bound(xp,yp,zp,xc,yc,zc,rpp,drp, &
                   lap,ph,bigP,Symmetry, &
                   nvec,dvec,rhovec,Pvec,vvec,rhop,Pp,vxp,vyp,vzp)
              rho_b(i,j,kmax)=rhop
              P(i,j,kmax)=Pp
              vx(i,j,kmax)=vxp
              vy(i,j,kmax)=vyp
              vz(i,j,kmax)=vzp
           enddo
        enddo
     end if

     if (have_bdry_min(3)==1) then
        zp=z(imin,jmin,kmin)
        do i=imin,imax
           xp=x(i,jmin,kmin)
           do j=jmin,jmax
              yp=y(i,j,kmin)
              lap=lapse(i,j,kmin)
              ph=phi(i,j,kmin)
              rpp=RP(i,j,kmin)
              drp=DR(i,j,kmin)
              call get_bound(xp,yp,zp,xc,yc,zc,rpp,drp, &
                   lap,ph,bigP,Symmetry, &
                   nvec,dvec,rhovec,Pvec,vvec,rhop,Pp,vxp,vyp,vzp)
              rho_b(i,j,kmin)=rhop
              P(i,j,kmin)=Pp
              vx(i,j,kmin)=vxp
              vy(i,j,kmin)=vyp
              vz(i,j,kmin)=vzp
           enddo
        enddo
     end if

  endif

  if(Symmetry==AXISYM) then
     
     if (have_bdry_max(1)==1) then ! do outer x boundary
        i=imax
        !        j=2
        do j=jmin,jmax
           do k=kmin,kmax
              rho_bl = rho_b(i,j,k)
              Pl = P(i,j,k)
              vxl = vx(i,j,k)
              vyl = vy(i,j,k)
              vzl = vz(i,j,k)
              Bxl = Bx(i,j,k)
              Byl = By(i,j,k)
              Bzl = Bz(i,j,k)

              AUX(1)  = phi(i,j,k)
              AUX(2)  = lapse(i,j,k)
              AUX(3)  = shiftx(i,j,k)
              AUX(4)  = shifty(i,j,k)
              AUX(5)  = shiftz(i,j,k)
              AUX(6)  = gxx(i,j,k)
              AUX(7)  = gxy(i,j,k)
              AUX(8)  = gxz(i,j,k)
              AUX(9)  = gyy(i,j,k)
              AUX(10) = gyz(i,j,k)
              AUX(11) = gzz(i,j,k)
              AUX(12) = gupxx(i,j,k)
              AUX(13) = gupxy(i,j,k)
              AUX(14) = gupxz(i,j,k)
              AUX(15) = gupyy(i,j,k)
              AUX(16) = gupyz(i,j,k)
              AUX(17) = gupzz(i,j,k)

!              if(i.eq.1.and.j.eq.1.and.k.eq.2)write(6,*)'sxx0:',sxx(1,1,2)

              call recompute_vars(rho_bl,Pl,vxl,vyl,vzl,Bxl,Byl,Bzl,AUX,m,rho_sl,taul, &
                   mhd_st_xl,mhd_st_yl,mhd_st_zl,st_xl,st_yl,st_zl,wl,hl,u0l,Exl,Eyl,Ezl,&
                   E_radl,F_rad0l,F_radxl,F_radyl,F_radzl,P_radl, tau_radl, S_rad_xl, S_rad_yl, S_rad_zl,&
		   sbtl,sbxl,sbyl,sbzl,rhol,Sxl,Syl,Szl,Sxxl,Sxyl,Sxzl,Syyl,Syzl,Szzl, &
                   neos, ergo_star, ergo_sigma,rho_tab, P_tab, eps_tab, k_tab, gamma_tab, gamma_th,rho_b_atm)

 !             if(i.eq.1.and.j.eq.1.and.k.eq.2)write(6,*)'sxx1:',sxx(1,1,2)
              ! Assign primitive variables which may have been modified
              vx(i,j,k) = vxl
              vy(i,j,k) = vyl
              vz(i,j,k) = vzl

              ! Assign conserved variables
              rho_star(i,j,k) = rho_sl
              tau(i,j,k) = taul
              mhd_st_x(i,j,k) = mhd_st_xl
              mhd_st_y(i,j,k) = mhd_st_yl
              mhd_st_z(i,j,k) = mhd_st_zl

              ! Assign other variables
              st_x(i,j,k) = st_xl
              st_y(i,j,k) = st_yl
              st_z(i,j,k) = st_zl
              w(i,j,k) = wl
              h(i,j,k) = hl
              u0(i,j,k) = u0l
              Ex(i,j,k) = Exl
              Ey(i,j,k) = Eyl
              Ez(i,j,k) = Ezl
              sbt(i,j,k) = sbtl
              sbx(i,j,k) = sbxl
              sby(i,j,k) = sbyl
              sbz(i,j,k) = sbzl
              rho(i,j,k) = rhol
              Sx(i,j,k) = Sxl
              Sy(i,j,k) = Syl
              Sz(i,j,k) = Szl
              Sxx(i,j,k) = Sxxl
              Sxy(i,j,k) = Sxyl
              Sxz(i,j,k) = Sxzl
              Syy(i,j,k) = Syyl
              Syz(i,j,k) = Syzl
              Szz(i,j,k) = Szzl
           enddo
        end do
     end if
!     write(6,*)'sxx2:',sxx(1,1,2)

     if (have_bdry_max(3)==1) then ! do outer z boundary (positive)
        k=kmax
        !        j=2
        do j=jmin,jmax
           do i=imin,imax
              rho_bl = rho_b(i,j,k)
              Pl = P(i,j,k)
              vxl = vx(i,j,k)
              vyl = vy(i,j,k)
              vzl = vz(i,j,k)
              Bxl = Bx(i,j,k)
              Byl = By(i,j,k)
              Bzl = Bz(i,j,k)

              AUX(1)  = phi(i,j,k)
              AUX(2)  = lapse(i,j,k)
              AUX(3)  = shiftx(i,j,k)
              AUX(4)  = shifty(i,j,k)
              AUX(5)  = shiftz(i,j,k)
              AUX(6)  = gxx(i,j,k)
              AUX(7)  = gxy(i,j,k)
              AUX(8)  = gxz(i,j,k)
              AUX(9)  = gyy(i,j,k)
              AUX(10) = gyz(i,j,k)
              AUX(11) = gzz(i,j,k)
              AUX(12) = gupxx(i,j,k)
              AUX(13) = gupxy(i,j,k)
              AUX(14) = gupxz(i,j,k)
              AUX(15) = gupyy(i,j,k)
              AUX(16) = gupyz(i,j,k)
              AUX(17) = gupzz(i,j,k)

              call recompute_vars(rho_bl,Pl,vxl,vyl,vzl,Bxl,Byl,Bzl,AUX,m,rho_sl,taul, &
                   mhd_st_xl,mhd_st_yl,mhd_st_zl,st_xl,st_yl,st_zl,wl,hl,u0l,Exl,Eyl,Ezl,&
		   E_radl,F_rad0l,F_radxl,F_radyl,F_radzl,P_radl,tau_radl, S_rad_xl, S_rad_yl, S_rad_zl,&
                   sbtl,sbxl,sbyl,sbzl,rhol,Sxl,Syl,Szl,Sxxl,Sxyl,Sxzl,Syyl,Syzl,Szzl, &
                   neos, ergo_star, ergo_sigma,rho_tab, P_tab, eps_tab, k_tab, gamma_tab, gamma_th,rho_b_atm)

              ! Assign primitive variables which may have been modified
              vx(i,j,k) = vxl
              vy(i,j,k) = vyl
              vz(i,j,k) = vzl

              ! Assign conserved variables
              rho_star(i,j,k) = rho_sl
              tau(i,j,k) = taul
              mhd_st_x(i,j,k) = mhd_st_xl
              mhd_st_y(i,j,k) = mhd_st_yl
              mhd_st_z(i,j,k) = mhd_st_zl

              ! Assign other variables
              st_x(i,j,k) = st_xl
              st_y(i,j,k) = st_yl
              st_z(i,j,k) = st_zl
              w(i,j,k) = wl
              h(i,j,k) = hl
              u0(i,j,k) = u0l
              Ex(i,j,k) = Exl
              Ey(i,j,k) = Eyl
              Ez(i,j,k) = Ezl
              sbt(i,j,k) = sbtl
              sbx(i,j,k) = sbxl
              sby(i,j,k) = sbyl
              sbz(i,j,k) = sbzl
              rho(i,j,k) = rhol
              Sx(i,j,k) = Sxl
              Sy(i,j,k) = Syl
              Sz(i,j,k) = Szl
              Sxx(i,j,k) = Sxxl
              Sxy(i,j,k) = Sxyl
              Sxz(i,j,k) = Sxzl
              Syy(i,j,k) = Syyl
              Syz(i,j,k) = Syzl
              Szz(i,j,k) = Szzl
           enddo
        end do
     end if
!     write(6,*)'sxx3:',sxx(1,1,2)

     if (have_bdry_min(3)==1) then ! do outer z boundary (negative)
        ! k = kmin
        k=kmin
        !        j=2
        do j=jmin,jmax
           do i=imin,imax
              rho_bl = rho_b(i,j,k)
              Pl = P(i,j,k)
              vxl = vx(i,j,k)
              vyl = vy(i,j,k)
              vzl = vz(i,j,k)
              Bxl = Bx(i,j,k)
              Byl = By(i,j,k)
              Bzl = Bz(i,j,k)

              AUX(1)  = phi(i,j,k)
              AUX(2)  = lapse(i,j,k)
              AUX(3)  = shiftx(i,j,k)
              AUX(4)  = shifty(i,j,k)
              AUX(5)  = shiftz(i,j,k)
              AUX(6)  = gxx(i,j,k)
              AUX(7)  = gxy(i,j,k)
              AUX(8)  = gxz(i,j,k)
              AUX(9)  = gyy(i,j,k)
              AUX(10) = gyz(i,j,k)
              AUX(11) = gzz(i,j,k)
              AUX(12) = gupxx(i,j,k)
              AUX(13) = gupxy(i,j,k)
              AUX(14) = gupxz(i,j,k)
              AUX(15) = gupyy(i,j,k)
              AUX(16) = gupyz(i,j,k)
              AUX(17) = gupzz(i,j,k)

              call recompute_vars(rho_bl,Pl,vxl,vyl,vzl,Bxl,Byl,Bzl,AUX,m,rho_sl,taul, &
                   mhd_st_xl,mhd_st_yl,mhd_st_zl,st_xl,st_yl,st_zl,wl,hl,u0l,Exl,Eyl,Ezl,&
		   E_radl,F_rad0l,F_radxl,F_radyl,F_radzl,P_radl,tau_radl, S_rad_xl, S_rad_yl, S_rad_zl,&
                   sbtl,sbxl,sbyl,sbzl,rhol,Sxl,Syl,Szl,Sxxl,Sxyl,Sxzl,Syyl,Syzl,Szzl, &
                   neos, ergo_star, ergo_sigma,rho_tab, P_tab, eps_tab, k_tab, gamma_tab, gamma_th,rho_b_atm)

              ! Assign primitive variables which may have been modified
              vx(i,j,k) = vxl
              vy(i,j,k) = vyl
              vz(i,j,k) = vzl

              ! Assign conserved variables
              rho_star(i,j,k) = rho_sl
              tau(i,j,k) = taul
              mhd_st_x(i,j,k) = mhd_st_xl
              mhd_st_y(i,j,k) = mhd_st_yl
              mhd_st_z(i,j,k) = mhd_st_zl

              ! Assign other variables
              st_x(i,j,k) = st_xl
              st_y(i,j,k) = st_yl
              st_z(i,j,k) = st_zl
              w(i,j,k) = wl
              h(i,j,k) = hl
              u0(i,j,k) = u0l
              Ex(i,j,k) = Exl
              Ey(i,j,k) = Eyl
              Ez(i,j,k) = Ezl
              sbt(i,j,k) = sbtl
              sbx(i,j,k) = sbxl
              sby(i,j,k) = sbyl
              sbz(i,j,k) = sbzl
              rho(i,j,k) = rhol
              Sx(i,j,k) = Sxl
              Sy(i,j,k) = Syl
              Sz(i,j,k) = Szl
              Sxx(i,j,k) = Sxxl
              Sxy(i,j,k) = Sxyl
              Sxz(i,j,k) = Sxzl
              Syy(i,j,k) = Syyl
              Syz(i,j,k) = Syzl
              Szz(i,j,k) = Szzl
           enddo
        end do
     end if
!     write(6,*)'sxx4:',sxx(1,1,2)


  else ! not evolving in axisymmetry.
     if (have_bdry_max(1)==1) then ! do outer x boundary (positive)
        i=imax
        do k=kmin,kmax
           do j=jmin,jmax
              rho_bl = rho_b(i,j,k)
              Pl = P(i,j,k)
              vxl = vx(i,j,k)
              vyl = vy(i,j,k)
              vzl = vz(i,j,k)
              Bxl = Bx(i,j,k)
              Byl = By(i,j,k)
              Bzl = Bz(i,j,k)

              AUX(1)  = phi(i,j,k)
              AUX(2)  = lapse(i,j,k)
              AUX(3)  = shiftx(i,j,k)
              AUX(4)  = shifty(i,j,k)
              AUX(5)  = shiftz(i,j,k)
              AUX(6)  = gxx(i,j,k)
              AUX(7)  = gxy(i,j,k)
              AUX(8)  = gxz(i,j,k)
              AUX(9)  = gyy(i,j,k)
              AUX(10) = gyz(i,j,k)
              AUX(11) = gzz(i,j,k)
              AUX(12) = gupxx(i,j,k)
              AUX(13) = gupxy(i,j,k)
              AUX(14) = gupxz(i,j,k)
              AUX(15) = gupyy(i,j,k)
              AUX(16) = gupyz(i,j,k)
              AUX(17) = gupzz(i,j,k)

              call recompute_vars(rho_bl,Pl,vxl,vyl,vzl,Bxl,Byl,Bzl,AUX,m,rho_sl,taul, &
                   mhd_st_xl,mhd_st_yl,mhd_st_zl,st_xl,st_yl,st_zl,wl,hl,u0l,Exl,Eyl,Ezl,&
		   E_radl,F_rad0l,F_radxl,F_radyl,F_radzl,P_radl, tau_radl,S_rad_xl, S_rad_yl, S_rad_zl,&
                   sbtl,sbxl,sbyl,sbzl,rhol,Sxl,Syl,Szl,Sxxl,Sxyl,Sxzl,Syyl,Syzl,Szzl, &
                   neos, ergo_star, ergo_sigma, rho_tab, P_tab, eps_tab, k_tab, gamma_tab, gamma_th,rho_b_atm)


              ! Assign primitive variables which may have been modified
              vx(i,j,k) = vxl
              vy(i,j,k) = vyl
              vz(i,j,k) = vzl

              ! Assign conserved variables
              rho_star(i,j,k) = rho_sl
              tau(i,j,k) = taul
              mhd_st_x(i,j,k) = mhd_st_xl
              mhd_st_y(i,j,k) = mhd_st_yl
              mhd_st_z(i,j,k) = mhd_st_zl

              ! Assign other variables
              st_x(i,j,k) = st_xl
              st_y(i,j,k) = st_yl
              st_z(i,j,k) = st_zl
              w(i,j,k) = wl
              h(i,j,k) = hl
              u0(i,j,k) = u0l
              Ex(i,j,k) = Exl
              Ey(i,j,k) = Eyl
              Ez(i,j,k) = Ezl
              sbt(i,j,k) = sbtl
              sbx(i,j,k) = sbxl
              sby(i,j,k) = sbyl
              sbz(i,j,k) = sbzl
              rho(i,j,k) = rhol
              Sx(i,j,k) = Sxl
              Sy(i,j,k) = Syl
              Sz(i,j,k) = Szl
              Sxx(i,j,k) = Sxxl
              Sxy(i,j,k) = Sxyl
              Sxz(i,j,k) = Sxzl
              Syy(i,j,k) = Syyl
              Syz(i,j,k) = Syzl
              Szz(i,j,k) = Szzl
           end do
        end do
     end if
!     write(6,*)'sxx5:',sxx(1,1,2)

     if (have_bdry_min(1)==1) then ! do outer x boundary (negative)
        i=imin
        do k=kmin,kmax
           do j=jmin,jmax
              rho_bl = rho_b(i,j,k)
              Pl = P(i,j,k)
              vxl = vx(i,j,k)
              vyl = vy(i,j,k)
              vzl = vz(i,j,k)
              Bxl = Bx(i,j,k)
              Byl = By(i,j,k)
              Bzl = Bz(i,j,k)

              AUX(1)  = phi(i,j,k)
              AUX(2)  = lapse(i,j,k)
              AUX(3)  = shiftx(i,j,k)
              AUX(4)  = shifty(i,j,k)
              AUX(5)  = shiftz(i,j,k)
              AUX(6)  = gxx(i,j,k)
              AUX(7)  = gxy(i,j,k)
              AUX(8)  = gxz(i,j,k)
              AUX(9)  = gyy(i,j,k)
              AUX(10) = gyz(i,j,k)
              AUX(11) = gzz(i,j,k)
              AUX(12) = gupxx(i,j,k)
              AUX(13) = gupxy(i,j,k)
              AUX(14) = gupxz(i,j,k)
              AUX(15) = gupyy(i,j,k)
              AUX(16) = gupyz(i,j,k)
              AUX(17) = gupzz(i,j,k)

              call recompute_vars(rho_bl,Pl,vxl,vyl,vzl,Bxl,Byl,Bzl,AUX,m,rho_sl,taul, &
                   mhd_st_xl,mhd_st_yl,mhd_st_zl,st_xl,st_yl,st_zl,wl,hl,u0l,Exl,Eyl,Ezl,&
		   E_radl,F_rad0l,F_radxl,F_radyl,F_radzl,P_radl,tau_radl, S_rad_xl, S_rad_yl, S_rad_zl,&
                   sbtl,sbxl,sbyl,sbzl,rhol,Sxl,Syl,Szl,Sxxl,Sxyl,Sxzl,Syyl,Syzl,Szzl, &
                   neos, ergo_star, ergo_sigma, rho_tab, P_tab, eps_tab, k_tab, gamma_tab, gamma_th,rho_b_atm)

              ! Assign primitive variables which may have been modified
              vx(i,j,k) = vxl
              vy(i,j,k) = vyl
              vz(i,j,k) = vzl

              ! Assign conserved variables
              rho_star(i,j,k) = rho_sl
              tau(i,j,k) = taul
              mhd_st_x(i,j,k) = mhd_st_xl
              mhd_st_y(i,j,k) = mhd_st_yl
              mhd_st_z(i,j,k) = mhd_st_zl

              ! Assign other variables
              st_x(i,j,k) = st_xl
              st_y(i,j,k) = st_yl
              st_z(i,j,k) = st_zl
              w(i,j,k) = wl
              h(i,j,k) = hl
              u0(i,j,k) = u0l
              Ex(i,j,k) = Exl
              Ey(i,j,k) = Eyl
              Ez(i,j,k) = Ezl
              sbt(i,j,k) = sbtl
              sbx(i,j,k) = sbxl
              sby(i,j,k) = sbyl
              sbz(i,j,k) = sbzl
              rho(i,j,k) = rhol
              Sx(i,j,k) = Sxl
              Sy(i,j,k) = Syl
              Sz(i,j,k) = Szl
              Sxx(i,j,k) = Sxxl
              Sxy(i,j,k) = Sxyl
              Sxz(i,j,k) = Sxzl
              Syy(i,j,k) = Syyl
              Syz(i,j,k) = Syzl
              Szz(i,j,k) = Szzl
           end do
        end do
     end if
!     write(6,*)'sxx6:',sxx(1,1,2)

     if (have_bdry_max(2)==1) then ! do outer y boundary (positive)
        j=jmax
        do k=kmin,kmax
           do i=imin,imax
              rho_bl = rho_b(i,j,k)
              Pl = P(i,j,k)
              vxl = vx(i,j,k)
              vyl = vy(i,j,k)
              vzl = vz(i,j,k)
              Bxl = Bx(i,j,k)
              Byl = By(i,j,k)
              Bzl = Bz(i,j,k)

              AUX(1)  = phi(i,j,k)
              AUX(2)  = lapse(i,j,k)
              AUX(3)  = shiftx(i,j,k)
              AUX(4)  = shifty(i,j,k)
              AUX(5)  = shiftz(i,j,k)
              AUX(6)  = gxx(i,j,k)
              AUX(7)  = gxy(i,j,k)
              AUX(8)  = gxz(i,j,k)
              AUX(9)  = gyy(i,j,k)
              AUX(10) = gyz(i,j,k)
              AUX(11) = gzz(i,j,k)
              AUX(12) = gupxx(i,j,k)
              AUX(13) = gupxy(i,j,k)
              AUX(14) = gupxz(i,j,k)
              AUX(15) = gupyy(i,j,k)
              AUX(16) = gupyz(i,j,k)
              AUX(17) = gupzz(i,j,k)

              call recompute_vars(rho_bl,Pl,vxl,vyl,vzl,Bxl,Byl,Bzl,AUX,m,rho_sl,taul, &
                   mhd_st_xl,mhd_st_yl,mhd_st_zl,st_xl,st_yl,st_zl,wl,hl,u0l,Exl,Eyl,Ezl,&
		   E_radl,F_rad0l,F_radxl,F_radyl,F_radzl,P_radl,tau_radl, S_rad_xl, S_rad_yl, S_rad_zl,&
                   sbtl,sbxl,sbyl,sbzl,rhol,Sxl,Syl,Szl,Sxxl,Sxyl,Sxzl,Syyl,Syzl,Szzl, &
                   neos, ergo_star, ergo_sigma, rho_tab, P_tab, eps_tab, k_tab, gamma_tab, gamma_th,rho_b_atm)

              ! Assign primitive variables which may have been modified
              vx(i,j,k) = vxl
              vy(i,j,k) = vyl
              vz(i,j,k) = vzl

              ! Assign conserved variables
              rho_star(i,j,k) = rho_sl
              tau(i,j,k) = taul
              mhd_st_x(i,j,k) = mhd_st_xl
              mhd_st_y(i,j,k) = mhd_st_yl
              mhd_st_z(i,j,k) = mhd_st_zl

              ! Assign other variables
              st_x(i,j,k) = st_xl
              st_y(i,j,k) = st_yl
              st_z(i,j,k) = st_zl
              w(i,j,k) = wl
              h(i,j,k) = hl
              u0(i,j,k) = u0l
              Ex(i,j,k) = Exl
              Ey(i,j,k) = Eyl
              Ez(i,j,k) = Ezl
              sbt(i,j,k) = sbtl
              sbx(i,j,k) = sbxl
              sby(i,j,k) = sbyl
              sbz(i,j,k) = sbzl
              rho(i,j,k) = rhol
              Sx(i,j,k) = Sxl
              Sy(i,j,k) = Syl
              Sz(i,j,k) = Szl
              Sxx(i,j,k) = Sxxl
              Sxy(i,j,k) = Sxyl
              Sxz(i,j,k) = Sxzl
              Syy(i,j,k) = Syyl
              Syz(i,j,k) = Syzl
              Szz(i,j,k) = Szzl
           end do
        end do
     end if
!     write(6,*)'sxx7:',sxx(1,1,2)

     if (have_bdry_min(2)==1) then ! do outer y boundary (negative)
        j=jmin
        do k=kmin,kmax
           do i=imin,imax
              rho_bl = rho_b(i,j,k)
              Pl = P(i,j,k)
              vxl = vx(i,j,k)
              vyl = vy(i,j,k)
              vzl = vz(i,j,k)
              Bxl = Bx(i,j,k)
              Byl = By(i,j,k)
              Bzl = Bz(i,j,k)

              AUX(1)  = phi(i,j,k)
              AUX(2)  = lapse(i,j,k)
              AUX(3)  = shiftx(i,j,k)
              AUX(4)  = shifty(i,j,k)
              AUX(5)  = shiftz(i,j,k)
              AUX(6)  = gxx(i,j,k)
              AUX(7)  = gxy(i,j,k)
              AUX(8)  = gxz(i,j,k)
              AUX(9)  = gyy(i,j,k)
              AUX(10) = gyz(i,j,k)
              AUX(11) = gzz(i,j,k)
              AUX(12) = gupxx(i,j,k)
              AUX(13) = gupxy(i,j,k)
              AUX(14) = gupxz(i,j,k)
              AUX(15) = gupyy(i,j,k)
              AUX(16) = gupyz(i,j,k)
              AUX(17) = gupzz(i,j,k)

              call recompute_vars(rho_bl,Pl,vxl,vyl,vzl,Bxl,Byl,Bzl,AUX,m,rho_sl,taul, &
                   mhd_st_xl,mhd_st_yl,mhd_st_zl,st_xl,st_yl,st_zl,wl,hl,u0l,Exl,Eyl,Ezl,&
		   E_radl,F_rad0l,F_radxl,F_radyl,F_radzl,P_radl,tau_radl, S_rad_xl, S_rad_yl, S_rad_zl,&
                   sbtl,sbxl,sbyl,sbzl,rhol,Sxl,Syl,Szl,Sxxl,Sxyl,Sxzl,Syyl,Syzl,Szzl, &
                   neos, ergo_star, ergo_sigma, rho_tab, P_tab, eps_tab, k_tab, gamma_tab, gamma_th,rho_b_atm)

              ! Assign primitive variables which may have been modified
              vx(i,j,k) = vxl
              vy(i,j,k) = vyl
              vz(i,j,k) = vzl

              ! Assign conserved variables
              rho_star(i,j,k) = rho_sl
              tau(i,j,k) = taul
              mhd_st_x(i,j,k) = mhd_st_xl
              mhd_st_y(i,j,k) = mhd_st_yl
              mhd_st_z(i,j,k) = mhd_st_zl

              ! Assign other variables
              st_x(i,j,k) = st_xl
              st_y(i,j,k) = st_yl
              st_z(i,j,k) = st_zl
              w(i,j,k) = wl
              h(i,j,k) = hl
              u0(i,j,k) = u0l
              Ex(i,j,k) = Exl
              Ey(i,j,k) = Eyl
              Ez(i,j,k) = Ezl
              sbt(i,j,k) = sbtl
              sbx(i,j,k) = sbxl
              sby(i,j,k) = sbyl
              sbz(i,j,k) = sbzl
              rho(i,j,k) = rhol
              Sx(i,j,k) = Sxl
              Sy(i,j,k) = Syl
              Sz(i,j,k) = Szl
              Sxx(i,j,k) = Sxxl
              Sxy(i,j,k) = Sxyl
              Sxz(i,j,k) = Sxzl
              Syy(i,j,k) = Syyl
              Syz(i,j,k) = Syzl
              Szz(i,j,k) = Szzl
           end do
        end do
     end if
!     write(6,*)'sxx8:',sxx(1,1,2)

     if (have_bdry_max(3)==1) then ! do outer z boundary (positive)
        k=kmax
        do j=jmin,jmax
           do i=imin,imax
              rho_bl = rho_b(i,j,k)
              Pl = P(i,j,k)
              vxl = vx(i,j,k)
              vyl = vy(i,j,k)
              vzl = vz(i,j,k)
              Bxl = Bx(i,j,k)
              Byl = By(i,j,k)
              Bzl = Bz(i,j,k)

              AUX(1)  = phi(i,j,k)
              AUX(2)  = lapse(i,j,k)
              AUX(3)  = shiftx(i,j,k)
              AUX(4)  = shifty(i,j,k)
              AUX(5)  = shiftz(i,j,k)
              AUX(6)  = gxx(i,j,k)
              AUX(7)  = gxy(i,j,k)
              AUX(8)  = gxz(i,j,k)
              AUX(9)  = gyy(i,j,k)
              AUX(10) = gyz(i,j,k)
              AUX(11) = gzz(i,j,k)
              AUX(12) = gupxx(i,j,k)
              AUX(13) = gupxy(i,j,k)
              AUX(14) = gupxz(i,j,k)
              AUX(15) = gupyy(i,j,k)
              AUX(16) = gupyz(i,j,k)
              AUX(17) = gupzz(i,j,k)

              call recompute_vars(rho_bl,Pl,vxl,vyl,vzl,Bxl,Byl,Bzl,AUX,m,rho_sl,taul, &
                   mhd_st_xl,mhd_st_yl,mhd_st_zl,st_xl,st_yl,st_zl,wl,hl,u0l,Exl,Eyl,Ezl,&
		   E_radl,F_rad0l,F_radxl,F_radyl,F_radzl,P_radl,tau_radl, S_rad_xl, S_rad_yl, S_rad_zl,&
                   sbtl,sbxl,sbyl,sbzl,rhol,Sxl,Syl,Szl,Sxxl,Sxyl,Sxzl,Syyl,Syzl,Szzl, &
                   neos, ergo_star, ergo_sigma,rho_tab, P_tab, eps_tab, k_tab, gamma_tab, gamma_th,rho_b_atm)

              ! Assign primitive variables which may have been modified
              vx(i,j,k) = vxl
              vy(i,j,k) = vyl
              vz(i,j,k) = vzl

              ! Assign conserved variables
              rho_star(i,j,k) = rho_sl
              tau(i,j,k) = taul
              mhd_st_x(i,j,k) = mhd_st_xl
              mhd_st_y(i,j,k) = mhd_st_yl
              mhd_st_z(i,j,k) = mhd_st_zl

              ! Assign other variables
              st_x(i,j,k) = st_xl
              st_y(i,j,k) = st_yl
              st_z(i,j,k) = st_zl
              w(i,j,k) = wl
              h(i,j,k) = hl
              u0(i,j,k) = u0l
              Ex(i,j,k) = Exl
              Ey(i,j,k) = Eyl
              Ez(i,j,k) = Ezl
              sbt(i,j,k) = sbtl
              sbx(i,j,k) = sbxl
              sby(i,j,k) = sbyl
              sbz(i,j,k) = sbzl
              rho(i,j,k) = rhol
              Sx(i,j,k) = Sxl
              Sy(i,j,k) = Syl
              Sz(i,j,k) = Szl
              Sxx(i,j,k) = Sxxl
              Sxy(i,j,k) = Sxyl
              Sxz(i,j,k) = Sxzl
              Syy(i,j,k) = Syyl
              Syz(i,j,k) = Syzl
              Szz(i,j,k) = Szzl
           end do
        end do
     end if
!     write(6,*)'sxx9:',sxx(1,1,2)

     if (have_bdry_min(3)==1) then ! do outer z boundary (negative)
        k=kmin
        do j=jmin,jmax
           do i=imin,imax
              rho_bl = rho_b(i,j,k)
              Pl = P(i,j,k)
              vxl = vx(i,j,k)
              vyl = vy(i,j,k)
              vzl = vz(i,j,k)
              Bxl = Bx(i,j,k)
              Byl = By(i,j,k)
              Bzl = Bz(i,j,k)

              AUX(1)  = phi(i,j,k)
              AUX(2)  = lapse(i,j,k)
              AUX(3)  = shiftx(i,j,k)
              AUX(4)  = shifty(i,j,k)
              AUX(5)  = shiftz(i,j,k)
              AUX(6)  = gxx(i,j,k)
              AUX(7)  = gxy(i,j,k)
              AUX(8)  = gxz(i,j,k)
              AUX(9)  = gyy(i,j,k)
              AUX(10) = gyz(i,j,k)
              AUX(11) = gzz(i,j,k)
              AUX(12) = gupxx(i,j,k)
              AUX(13) = gupxy(i,j,k)
              AUX(14) = gupxz(i,j,k)
              AUX(15) = gupyy(i,j,k)
              AUX(16) = gupyz(i,j,k)
              AUX(17) = gupzz(i,j,k)

              call recompute_vars(rho_bl,Pl,vxl,vyl,vzl,Bxl,Byl,Bzl,AUX,m,rho_sl,taul, &
                   mhd_st_xl,mhd_st_yl,mhd_st_zl,st_xl,st_yl,st_zl,wl,hl,u0l,Exl,Eyl,Ezl,&
		   E_radl,F_rad0l,F_radxl,F_radyl,F_radzl,P_radl,tau_radl, S_rad_xl, S_rad_yl, S_rad_zl,&
                   sbtl,sbxl,sbyl,sbzl,rhol,Sxl,Syl,Szl,Sxxl,Sxyl,Sxzl,Syyl,Syzl,Szzl, &
                   neos, ergo_star, ergo_sigma, rho_tab, P_tab, eps_tab, k_tab, gamma_tab, gamma_th,rho_b_atm)

              ! Assign primitive variables which may have been modified
              vx(i,j,k) = vxl
              vy(i,j,k) = vyl
              vz(i,j,k) = vzl

              ! Assign conserved variables
              rho_star(i,j,k) = rho_sl
              tau(i,j,k) = taul
              mhd_st_x(i,j,k) = mhd_st_xl
              mhd_st_y(i,j,k) = mhd_st_yl
              mhd_st_z(i,j,k) = mhd_st_zl

              ! Assign other variables
              st_x(i,j,k) = st_xl
              st_y(i,j,k) = st_yl
              st_z(i,j,k) = st_zl
              w(i,j,k) = wl
              h(i,j,k) = hl
              u0(i,j,k) = u0l
              Ex(i,j,k) = Exl
              Ey(i,j,k) = Eyl
              Ez(i,j,k) = Ezl
              sbt(i,j,k) = sbtl
              sbx(i,j,k) = sbxl
              sby(i,j,k) = sbyl
              sbz(i,j,k) = sbzl
              rho(i,j,k) = rhol
              Sx(i,j,k) = Sxl
              Sy(i,j,k) = Syl
              Sz(i,j,k) = Szl
              Sxx(i,j,k) = Sxxl
              Sxy(i,j,k) = Sxyl
              Sxz(i,j,k) = Sxzl
              Syy(i,j,k) = Syyl
              Syz(i,j,k) = Syzl
              Szz(i,j,k) = Szzl
           end do
        end do
     end if
  end if

!     write(6,*)'sxx10:',sxx(1,1,2)

!  write(6,*)'rhos5:',rho_star(1,1,2),rho_star(48,48,3)
!  write(6,*)'rhob5:',rho_b(1,1,2),rho_b(48,48,3)
!  write(6,*)'vx5:',vx(1,1,2),vx(48,48,3)
!  write(6,*)'sxx5:',sxx(1,1,2),sxx(48,48,3)


end subroutine matter_bc_mhd_movbh

subroutine get_bound(xp,yp,zp,xbh,ybh,zbh,RP,DR,lap,phi,bigP,Symmetry, &
     nvec,dvec,rhovec,Pvec,vvec,rhop,Pp,vxp,vyp,vzp)
  implicit none
  real*8 :: xp,yp,zp,RP,DR,lap,phi,bigP,rhop,Pp,vxp,vyp,vzp,dvec
  real*8 :: xbh,ybh,zbh,nx2,ny2,nz2,xp2,yp2,zp2
  integer :: nvec,Symmetry
  real*8, dimension(nvec) :: rhovec,Pvec,vvec
  
  real*8 :: rad,nx,ny,nz,dp,up,psi,alph,ut,gamv,sol,vxi,vyi,vzi
  real*8 :: rad2,xnew,ynew,znew,fac,Jxx,Jxy,Jxz,Jyy,Jyz,Jzz
  integer :: np

!  Calculate the distance noting fisheye
! for the moment, we assume the BH position is the same 
! between fish and phys !!!

!first the physical coords at the boundary
  rad=sqrt(xp**2+yp**2+zp**2)
  xnew=xp*RP/rad
  ynew=yp*RP/rad
  znew=zp*RP/rad
  nx=xp/rad
  ny=yp/rad
  nz=zp/rad

! now the bondi solution relative to the BH
  xp2=xnew-xbh
  yp2=ynew-ybh
  zp2=znew-zbh
  rad2=sqrt(xp2**2+yp2**2+zp2**2)

  nx2=xp2/rad2
  ny2=yp2/rad2
  nz2=zp2/rad2
  
! integer and fractional piece
  np=int(rad2/dvec)
  dp=rad2/dvec-np

  if(np.lt.1.or. np.gt.nvec-1) then
     write(6,*)'Error in movbh boundaries, np=',np,nvec,dvec,rad,xp,yp,zp,nx,ny,nz
     stop
  endif
  
  rhop=(1.0-dp)*rhovec(np)+dp*rhovec(np+1)
  Pp=(1.0-dp)*Pvec(np)+dp*Pvec(np+1)
  ! this is the new values of uiso
  up=(1.0-dp)*vvec(np)+dp*vvec(np+1)
! use the physical psi, not the fisheye!!!!!
  psi=(rad/RP)**(1./3.)*(DR)**(-1./6.)*exp(phi)
  alph=lap+1.0
  ut = sqrt(1+up**2*psi**4)/alph
  gamv=1.0/sqrt(1.0-bigP**2)
  sol=alph/psi**2
  if(Symmetry==4) then
     vzp=(sol*bigP-up*nz2/ut)/(1.0-bigP*up*nz2/ut/sol)
     vyp=-1.0*up*ny2/ut/gamv/(1.0-bigP*up*nz2/ut/sol)
     vxp=-1.0*up*nx2/ut/gamv/(1.0-bigP*up*nz2/ut/sol)
  else
     vxp=(sol*bigP-up*nx2/ut)/(1.0-bigP*up*nx2/ut/sol)
     vyp=-1.0*up*ny2/ut/gamv/(1.0-bigP*up*nx2/ut/sol)
     vzp=-1.0*up*nz2/ut/gamv/(1.0-bigP*up*nx2/ut/sol)
  endif
  
! fisheye the velocity

  fac = 1.0/dR - rad/Rp
  Jxx = rad/Rp + nx * nx * fac
  Jxy = nx * ny * fac
  Jxz = nx * nz * fac
  Jyy = rad/Rp + ny * ny * fac
  Jyz = ny * nz * fac
  Jzz = rad/Rp + nz * nz * fac

  vxi=vxp
  vyi=vyp
  vzi=vzp

  vxp=jxx*vxi+jxy*vyi+jxz*vzi
  vyp=jxy*vxi+jyy*vyi+jyz*vzi
  vzp=jxz*vxi+jyz*vyi+jzz*vzi

  if(((xp.gt.0.0624.and.xp.lt.0.0626).or.(yp.gt.0.0624.and.yp.lt.0.0626)).and.(zp.gt.0.0624.and.zp.lt.0.0626)) then
!     write(6,*)'Boundary:',xp,yp,zp,xnew,ynew,znew,nx,ny,nz,xp2,yp2,zp2,nx2,ny2,nz2,rad2, &
!          rhop,Pp,up,psi,alph,ut,gamv,sol,vxi,vyi,vzi,jxx,jxy,jxz,vxp,vyp,vzp
  endif

  return
end subroutine get_bound
