!--------------------------------------------------------------
! Driver for primitives and boundary conditions routines, v1.0
!--------------------------------------------------------------

#include "cctk.h"
#include "cctk_Arguments.h"
#include "cctk_Functions.h"
#include "cctk_Parameters.h"
!
subroutine mhd_primitives_and_bcs_v1(CCTK_ARGUMENTS)

  implicit none

  DECLARE_CCTK_ARGUMENTS
  DECLARE_CCTK_PARAMETERS
  DECLARE_CCTK_FUNCTIONS

  integer, dimension(3) :: ext,thisproc_have_global_bdry_min,thisproc_have_global_bdry_max
  real*8                :: dX,dY,dZ,levelnumber
  real*8                :: Xglobmin,Yglobmin,Zglobmin,Xglobmax,Yglobmax,Zglobmax
  real*8                :: rho_fail_max_step,M_fail_step,xNS1,yNS1, xNS2, yNS2
  integer               :: proc_imin,proc_jmin,proc_kmin,proc_imax,proc_jmax,proc_kmax
  integer               :: glob_imax,glob_jmax,glob_kmax
  integer               :: vindex,NFont_L,NFont
  integer               :: i,j,k,handle,dummy,ierr
  CCTK_REAL             :: reduction_value
  integer               :: AXISYM
  parameter(AXISYM = 4)


  ext = cctk_lsh

  dX = CCTK_DELTA_SPACE(1)
  dY = CCTK_DELTA_SPACE(2)
  dZ = CCTK_DELTA_SPACE(3)

  levelnumber = cctk_levfac(1)
  levelnumber = log(levelnumber)/log(2.D0)+1.D0

  glob_imax = ext(1)
  glob_jmax = ext(2)
  glob_kmax = ext(3)
  proc_imin = -100
  proc_jmin = -100
  proc_kmin = -100
  proc_imax = -1
  proc_jmax = -1
  proc_kmax = -1


! calcualte CoM for tempearture computation.

        if (Box1denom_VolInt == 0.0) then
	Box1denom_VolInt = 1.0e-10
        end if
	if (Box1denom_VolInt1 == 0.0) then
        Box1denom_VolInt2 = 1.0e-10
        end if
        if (Box1denom_VolInt1 == 0.0) then
	Box1denom_VolInt2 = 1.0e-10
        end if

        ! compute the position of the NSs (iter > 0)
     if(num_CO==2) then
        xNS1 = Box1X_VolInt1/Box1denom_VolInt1
        yNS1 = Box1Y_VolInt1/Box1denom_VolInt1

        xNS2 = Box1X_VolInt2/Box1denom_VolInt2
        yNS2 = Box1Y_VolInt2/Box1denom_VolInt2
     else
        ! compute the position of the NS
        xNS1 = Box1X_VolInt/Box1denom_VolInt
        yNS1 = Box1Y_VolInt/Box1denom_VolInt
     end if




  if(cctk_iteration.gt.0) then
     dX = CCTK_DELTA_SPACE(1)
     dY = CCTK_DELTA_SPACE(2)
     dZ = CCTK_DELTA_SPACE(3)

     thisproc_have_global_bdry_min = have_global_bdry_min(int(levelnumber),:)
     thisproc_have_global_bdry_max = have_global_bdry_max(int(levelnumber),:)

     if(thisproc_have_global_bdry_min(1)==1) proc_imin = 0
     if(thisproc_have_global_bdry_min(2)==1) proc_jmin = 0
     if(thisproc_have_global_bdry_min(3)==1) proc_kmin = 0
     if(thisproc_have_global_bdry_max(1)==1) proc_imax = glob_imax
     if(thisproc_have_global_bdry_max(2)==1) proc_jmax = glob_jmax
     if(thisproc_have_global_bdry_max(3)==1) proc_kmax = glob_kmax

     ! Should check if there are NaNs first...

     !-----------------------------------------------------------------------------------------
     ! PRIMITIVES SOLVER STEP:
     if (enable_primitives_disk == 0) then
        if(primitives_solver==11) then
           !Here we use the HARM primitives solver, with a new prescription that minimizes changes to
           !  conservatives without applying the "Font" fix.
           !We intend to make the below function truly generic, but currently it only supports Gamma=2.
           !  It can be trivially extended for arbitrary Gamma-law EOS's, but will require work for more
           !  generic EOS's.
           !We hope the below function will eventually be used in place of other primitives solver options,
           !  since it can be easily extended to use your desired technique for solving primitives.

	    !write(6,*) "(1)Inside driver_primitives_and_bcs_v1, test gamma_tab =", gamma_tab

           call primitives_generic(cctkGH,cctk_lsh,cctk_nghostzones,X,Y,Z, &
                phi,gxx,gxy,gxz,gyy,gyz,gzz, &
                gupxx,gupxy,gupxz,gupyy,gupyz,gupzz, &
                lapm1,shiftx,shifty,shiftz, &
                Bx,By,Bz, &
                mhd_st_x,mhd_st_y,mhd_st_z,tau,rho_star, &
                vx,vy,vz,P,rho_b,h,u0, &
                rho_b_atm,tau_atm, rho_b_max,&
		xNS1,yNS1, xNS2, yNS2, num_CO, M_B, rad_T_fac, rad_T_cutoff, rad_T_pow, rad_T_floor, T_fluid,&
                neos,ergo_star,ergo_sigma,rho_tab,P_tab,eps_tab,k_tab,gamma_tab, &
                temp1,temp2,temp3,temp4,temp5, &
                primitives_debug,Psi6threshold,horizon_enforce_rho_profile)

           !The goal of the below function is to just update the metric source terms.  We should
           !  really get rid of the old h,w,st_i,Ei gridfunctions...
           !Currently this only works for Gamma-law EOS's but could be extended for arbitary EOSs
           !  with some work.
           call metric_source_terms_and_misc_vars(cctkGH,cctk_lsh, &
                rho,Sx,Sy,Sz, &
                Sxx,Sxy,Sxz,Syy,Syz,Szz, &
		tau_Rad, S_rad_x,S_rad_y, S_rad_z,&                                     
		E_rad, F_rad0, F_radx, F_rady, F_radz, P_rad,&
                h,w,st_x,st_y,st_z, &
                Ex,Ey,Ez, &
                sbt,sbx,sby,sbz, &
                lapm1,shiftx,shifty,shiftz, &
                phi,gxx,gxy,gxz,gyy,gyz,gzz, &
                gupxx,gupxy,gupxz,gupyy,gupyz,gupzz, &
                P,rho_b,u0,vx,vy,vz, &
                Bx,By,Bz, &
                rho_star,mhd_st_x,mhd_st_y,mhd_st_z,&
		neos,ergo_star, ergo_sigma,&
                rho_tab, P_tab,eps_tab,k_tab,gamma_tab,&
                rho_b_atm)
        else if(primitives_solver==0) then
           ! Initial guess for h:
           !$omp parallel do
           do k=1,cctk_lsh(3)
              do j=1,cctk_lsh(2)
                 do i=1,cctk_lsh(1)
                    h_p(i,j,k) = h(i,j,k)
                 end do
              end do
           end do
           !$omp end parallel do

           !TODO: remove temp1 (unused) parameter.
           call primitive_vars_hybrid2(ext,cctk_nghostzones,X,Y,Z, &
                rho_star,tau,st_x,st_y,st_z, &
                mhd_st_x,mhd_st_y,mhd_st_z,neos, ergo_star, ergo_sigma,&
                rho_tab, P_tab, eps_tab, k_tab, gamma_tab, gamma_th, &
                w,temp1,rho_b,rho,P,h,Sx,Sy,Sz, &
                Sxx,Sxy,Sxz,Syy,Syz,Szz, &
                phi,lapm1,shiftx,shifty,shiftz, &
                gxx,gxy,gxz,gyy,gyz,gzz, &
                gupxx,gupxy,gupxz,gupyy,gupyz,gupzz, &
                h_p,u0,rho_b_max,rho_b_atm, &
                rho_fail_max_step,M_fail_step,rhos_max, &
                Bx,By,Bz,Ex,Ey,Ez, &
                vx,vy,vz, &
                sbt,sbx,sby,sbz, &
		xNS1,yNS2, xNS2, yNS2, num_CO, M_B, rad_T_fac,rad_T_cutoff, rad_T_pow, rad_T_floor, T_fluid,&
                proc_imin,proc_jmin,proc_kmin, &
                proc_imax,proc_jmax,proc_kmax, &
                glob_imax,glob_jmax,glob_kmax, &
                Symmetry,pfloor,excision_enable, &
                excision_zone_gf, tau_stildefix_enable,tau_atm,1)
        end if
     else if(enable_primitives_disk==1 .and. use_harm_primitives==0) then

        call primitive_vars_alt_disk(ext,X,Y,Z, &
             rho_star,tau,st_x,st_y,st_z, &
             mhd_st_x,mhd_st_y,mhd_st_z,neos, ergo_star, ergo_sigma, &
             rho_tab, P_tab, eps_tab, k_tab, gamma_tab, gamma_th, &
             w,rho_b,rho,P,h,Sx,Sy,Sz, &
             Sxx,Sxy,Sxz,Syy,Syz,Szz, &
             phi,lapm1,shiftx,shifty,shiftz, &
             gxx,gxy,gxz,gyy,gyz,gzz, &
             gupxx,gupxy,gupxz,gupyy,gupyz,gupzz, &
             h_p,u0,rho_b_max,rho_b_atm_gf, &
             rho_fail_max_step,M_fail_step, &
             Bx,By,Bz,Ex,Ey,Ez, &
             vx,vy,vz, &
             sbt,sbx,sby,sbz, &
             proc_imin,proc_jmin,proc_kmin,proc_imax,proc_jmax,proc_kmax, &
             glob_imax,glob_jmax,glob_kmax,Symmetry, &
             Fontfix_tracker_gf,pfloor_gf, NFont_L, &
             enable_HARM_energyvariable, excision_zone_gf, force_font_fix_fail, excision_enable)

        call CCTK_ReductionHandle(handle,"sum")
        call CCTK_ReduceLocalScalar(ierr,cctkGH,-1,handle,NFont_L,NFont,CCTK_VARIABLE_REAL)

     end if
!!$     else if(use_harm_primitives==1) then
!!$        ! call the C function--a wrapper for the Noble et al code.
!!$        ! At one time, the second line of the function call was:
!!$        ! rho_b, rho_b_p, P, P_p, vx, vy, vz, &
!!$        call primitive_vars_harm(NFont_L, CCTKGH, X, Y, Z, ext, &
!!$             rho_star, tau, mhd_st_x, mhd_st_y, mhd_st_z, &
!!$             rho_b, rho_b, P, P, vx, vy, vz, &
!!$             u0, Bx, By, Bz, lapm1, phi, &
!!$             shiftx, shifty, shiftz, Fontfix_tracker_gf, rho_b_atm_gf, &
!!$             gxx, gxy, gxz, gyy, gyz, gzz, &
!!$             gupxx, gupxy, gupxz, gupyy, gupyz, gupzz, &
!!$             Symmetry,  excision_radius, &
!!$             glob_imax, glob_jmax, glob_kmax, & 
!!$             proc_imax, proc_jmax, proc_kmax, & 
!!$             proc_imin, proc_jmin, proc_kmin)
!!$
!!$        call harm_impose_floors(ex,rho_b_atm_gf,pfloor_gf,rho_b,P, &
!!$             vx,vy,vz,Bx,By,Bz, &
!!$             rho_star,tau,mhd_st_x,mhd_st_y,mhd_st_z, &
!!$             lapm1,phi,shiftx,shifty,shiftz, &
!!$             gxx,gxy,gxz,gyy,gyz,gzz, &
!!$             neos,rho_tab,P_tab,eps_tab,k_tab,gamma_tab,gamma_th)
!!$
!!$        ! make sure you have the failures array stored in Fontfix_tracker_gf.
!!$        call repair_failures_mhd_disk(ex,X,Z,gamma_th,Fontfix_tracker_gf,rho_b,P, &
!!$             vx,vy,vz,u0,w,h,rho_star,tau, &
!!$             st_x,st_y,st_z,mhd_st_x,mhd_st_y,mhd_st_z, &
!!$             rho,Sx,Sy,Sz,Sxx,Sxy,Sxz,Syy,Syz,Szz, &
!!$             lapm1,shiftx,shifty,shiftz,phi, &
!!$             gxx,gxy,gxz,gyy,gyz,gzz, &
!!$             gupxx,gupxy,gupxz,gupyy,gupyz,gupzz,Bx,By,Bz, &
!!$             sbt,sbx,sby,sbz,rho_b_atm_gf, &
!!$             neos,rho_tab,P_tab,eps_tab,k_tab,gamma_tab, &
!!$             proc_imin,proc_jmin,proc_kmin,proc_imax,proc_jmax,proc_kmax, & 
!!$             glob_imax,glob_jmax,glob_kmax,Symmetry,pfloor_gf,enable_HARM_energyvariable,excision_radius)
!!$
!!$        !!&     call repair_failures_alt(ex,X,Z,gamma,Fontfix_tracker_gf,rho_b,P, &
!!$        !!&                          vx,vy,vz,u0,w,h,rho_star,tau, &
!!$        !!&                          st_x,st_y,st_z,mhd_st_x,mhd_st_y,mhd_st_z, &
!!$        !!&                          rho,Sx,Sy,Sz,Sxx,Sxy,Sxz,Syy,Syz,Szz, &
!!$        !!&                          lapm1,shiftx,shifty,shiftz,phi, &
!!$        !!&                          gxx,gxy,gxz,gyy,gyz,gzz, &
!!$        !!&                          gupxx,gupxy,gupxz,gupyy,gupyz,gupzz,Bx,By,Bz, &
!!$        !!&                          sbt,sbx,sby,sbz,rho_b_atm_gf, &
!!$        !!&                          neos,rho_tab,P_tab,eps_tab,k_tab,gamma_tab, &
!!$        !!&                          proc_imin,proc_jmin,proc_kmin,proc_imax,proc_jmax,proc_kmax,  &
!!$        !!&                          glob_imax,glob_jmax,glob_kmax,Symmetry,pfloor_gf,grid_type,enable_HARM_energyvariable,excision_radius)
!!$
!!$        call calculate_aux_harm(ex,gamma_th,rho_b,P, &
!!$             vx,vy,vz,u0,w,h,rho_star,tau, &
!!$             st_x,st_y,st_z,mhd_st_x,mhd_st_y,mhd_st_z, &
!!$             rho,Sx,Sy,Sz,Sxx,Sxy,Sxz,Syy,Syz,Szz, &
!!$             lapm1,shiftx,shifty,shiftz,phi, &
!!$             gxx,gxy,gxz,gyy,gyz,gzz, &
!!$             gupxx,gupxy,gupxz,gupyy,gupyz,gupzz,Bx,By,Bz, &
!!$             sbt,sbx,sby,sbz, &
!!$             neos,rho_tab,P_tab,eps_tab,k_tab,gamma_tab,proc_kmin)
!!$     end if

     !-----------------------------------------------------------------------------------------
     ! OUTER BOUNDARY UPDATE STEP:
     if(levelnumber==1.D0) then
        if(use_disk_bcs==0) then
           if(Matter_BC.le.6) then
              call matter_bc_mhd(ext,X,Y,Z, &
                   rho_star,tau,mhd_st_x,mhd_st_y,mhd_st_z, &
                   st_x,st_y,st_z, &
                   rho_b,P,vx,vy,vz,Bx,By,Bz, &
                   w,h,u0,Ex,Ey,Ez,sbt,sbx,sby,sbz, &
                   rho,Sx,Sy,Sz, &
                   Sxx,Sxy,Sxz,Syy,Syz,Szz, &
                   phi,lapm1,shiftx,shifty,shiftz, &
                   gxx,gxy,gxz,gyy,gyz,gzz, &
                   gupxx,gupxy,gupxz,gupyy,gupyz,gupzz, &
                   Symmetry,Matter_BC, &
                   neos,ergo_star,ergo_sigma,rho_tab,P_tab,eps_tab,k_tab,gamma_tab,gamma_th,rho_b_atm, &
                   thisproc_have_global_bdry_min,thisproc_have_global_bdry_max)
           else
              call matter_bc_mhd_movbh(ext,bh_posn_x(1),bh_posn_y(1),bh_posn_z(1),mhd_bigP, &
                   PhysicalRadius,RadiusDerivative,X,Y,Z, &
                   rho_star,tau,mhd_st_x,mhd_st_y,mhd_st_z, &
                   st_x,st_y,st_z, &
                   rho_b,P,vx,vy,vz,Bx,By,Bz, &
                   w,h,u0,Ex,Ey,Ez,sbt,sbx,sby,sbz, &
                   rho,Sx,Sy,Sz, &
                   Sxx,Sxy,Sxz,Syy,Syz,Szz, &
                   phi,lapm1,shiftx,shifty,shiftz, &
                   gxx,gxy,gxz,gyy,gyz,gzz, &
                   gupxx,gupxy,gupxz,gupyy,gupyz,gupzz, &
                   Symmetry,Matter_BC, &
                   neos,ergo_star,ergo_sigma,rho_tab,P_tab,eps_tab,k_tab,gamma_tab,gamma_th,rho_b_atm, &
                   nrhovec,dxvec,rhovec,Pvec,vvec, &
                   thisproc_have_global_bdry_min,thisproc_have_global_bdry_max) 
           endif
        else if(use_disk_bcs==1) then
           call matter_bc_mhd_disk(ext,Z, &
                rho_star,tau,mhd_st_x,mhd_st_y,mhd_st_z, &
                st_x,st_y,st_z, &
                rho_b,P,vx,vy,vz,Bx,By,Bz, &
                w,h,u0,Ex,Ey,Ez,sbt,sbx,sby,sbz, &
                rho,Sx,Sy,Sz, &
                Sxx,Sxy,Sxz,Syy,Syz,Szz, &
                phi,lapm1,shiftx,shifty,shiftz, &
                gxx,gxy,gxz,gyy,gyz,gzz, &
                gupxx,gupxy,gupxz,gupyy,gupyz,gupzz, &
                Symmetry,Matter_BC, &
                neos,ergo_star, ergo_sigma, rho_tab,P_tab,eps_tab,k_tab,gamma_tab,gamma_th,rho_b_atm_gf, &
                pfloor_gf, enable_HARM_energyvariable, &
                thisproc_have_global_bdry_min,thisproc_have_global_bdry_max)
        end if

     end if

     call CCTK_SyncGroup(dummy,cctkGH,'mhd_evolve::mhd_vs')
     call CCTK_SyncGroup(dummy,cctkGH,'mhd_evolve::mhd_conservatives')
     call CCTK_SyncGroup(dummy,cctkGH,'mhd_evolve::mhd_primitives')
     call CartSymGN(dummy,cctkGH,'mhd_evolve::mhd_conservatives')
     call CartSymGN(dummy,cctkGH,'mhd_evolve::mhd_primitives')
     call CartSymGN(dummy,cctkGH,'mhd_evolve::mhd_vs')

     ! Perform rotation for axisymmetric run
     ! Avoids NaN's in rho_star(1,:,:), etc.
     if (Symmetry==AXISYM .and. 0==0) then
        !The following removes NaN's from the x<0 ghost zones when em field evolution is turned off.
        !   When emfield evolution is turned on, the ghost zones behave better.
        if(X(1,1,1).lt.0.D0 .and. em_evolve_enable==0) then
           !just enforce the symmetry condition, since CartSymGN is disabled in axisymmetry
           rho_star(1,:,:) = rho_star(2,:,:)
        end if
        ! Following fixes a similar bug, occurs even if em_evolve_enable==1 !
        if(X(1,1,1).lt.0.D0) then
           h(1,:,:) = h(2,:,:)
        end if
        call BndCartoon2DVN(dummy, cctkGH, 0, 'mhd_evolve::h')
        call BndCartoon2DVN(dummy, cctkGH, 0, 'mhd_evolve::w')
        call BndCartoon2DVN(dummy, cctkGH, 0, 'mhd_evolve::rho_b')
        call BndCartoon2DVN(dummy, cctkGH, 0, 'mhd_evolve::rho_star')
        call BndCartoon2DVN(dummy, cctkGH, 0, 'mhd_evolve::P')
        call BndCartoon2DVN(dummy, cctkGH, 0, 'mhd_evolve::u0')
        call BndCartoon2DVN(dummy, cctkGH, 0, 'mhd_evolve::sbt')
        call CCTK_VarIndex(vindex,'mhd_evolve::sbx')
        call BndCartoon2DVI(dummy, cctkGH, 1, vindex) 
        call CCTK_VarIndex(vindex,'mhd_evolve::vx')
        call BndCartoon2DVI(dummy, cctkGH, 1, vindex)
     end if

     ! Following line is needed since we ignore ghostzones inside the primitives solver, so, e.g. Sy(i,j,1) is incorrect:
     call CartSymGN(dummy,cctkGH,'bssn::BSSN_matter')

  end if

end subroutine mhd_primitives_and_bcs_v1
