!-------------------------------------------------------------------
! Here we set up all required variables for OS tests, including:
!  emfields, BSSN variables, primitives, etc.
!-------------------------------------------------------------------

#include "cctk.h"
#include "cctk_Arguments.h"
#include "cctk_Functions.h"
#include "cctk_Parameters.h"

subroutine mhd_OS_initialdata_local(CCTK_ARGUMENTS)
  implicit none
  DECLARE_CCTK_ARGUMENTS
  DECLARE_CCTK_PARAMETERS
  DECLARE_CCTK_FUNCTIONS

  integer, dimension(3) :: ext
  real*8                :: dT,dX,dY,dZ,P_max,rho_max,tau_max,rhos_max,rho_fail_max_step,M_fail_step,rhobatm
  real*8                :: xmin,ymin,zmin,xmax,ymax,zmax
  integer               :: proc_imin,proc_jmin,proc_kmin,proc_imax,proc_jmax,proc_kmax
  integer               :: ierr,index,handle,dummy,glob_imax,glob_jmax,glob_kmax
  CCTK_REAL             :: reduction_value

  integer               :: i,j,k
  real*8                :: xs,ys, xspsi2
  real*8, parameter :: pi = 3.1415926535897932d0
  real*8, parameter :: c_cgs = 29979245800.0
  real*8, parameter :: G_cgs = 6.6743015e-8 
  real*8, parameter :: hbar_cgs = 1.05457266e-27 
  real*8, parameter :: kb_cgs = 1.380649e-16
  real*8, parameter :: m_n_cgs = 1.674927485e-24
  real*8, parameter :: rad_const_cgs = 7.5646e-15 
  real*8, parameter :: N_nu = 3.0
!  real*8, parameter :: M_sun_geo = 147767.0
  real*8, parameter :: M_sun_geo = 1.0
  real*8  	        :: s4pi,sb0_l,sb0_r,sb1_l,sb1_r,sb2_l,sb2_r,sb3_r,sb3_l,sbs_l,sbs_r
  real*8		:: eps, rho_OS, r_iso, tempOS1, tempOS2, fac, fac2, psi2, psi4, F_rad0l, P_radl, F_rad_xl, F_rad_yl, F_rad_zl
  real*8                :: shift_xl, shift_yl, shift_zl, v_xl, v_yl, v_zl, u_x, u_y, u_z, beta2,udotbeta,g_00l,u_0l
  real*8                :: zeta, chi_shock, Fasq, C_A, C_B, P_rad0xl, P_rad0yl, P_rad0zl, P_rad00l
  real*8                :: T_fluidl_cgs,E_rad_cgs,rho_b_cgs,n_nucleon,Fac_OS,eng_thermal_cgs,eng_thermal,P_nucl_cgs,P_nucl,P_thermal_OS,r_bound, P_cold, P_rad_m_cgs, P_rad_m



  integer :: NO_SYMM, EQUATORIAL, OCTANT, PI_SYMM, AXISYM
  parameter(NO_SYMM = 0, EQUATORIAL = 1, OCTANT = 2, PI_SYMM = 3, AXISYM = 4)

  integer :: ONE,ZERO
  parameter(ONE = 1.D0, ZERO = 0.D0)

  write(*,*) "Start OS_toy initialdata_local!!!!!"

  if(primitives_solver.eq.0 .or. enable_OS_collapse.ne.1) then
     write(*,*) "ERROR.  YOU MUST SET primitives_solver=1 or 2 AND enable_OS_collapse=1 FOR OS_toy TESTS"
     stop
  end if
 
  ! sqrt(4 pi) 
  s4pi = 2.d0*sqrt(pi)

  ext = cctk_lsh

  if(cctk_lsh(1).le.2*cctk_nghostzones(1)) then
     write(*,*) "ERROR: MUST SET NX>NGHOSTZONESX*2!"
     stop
  else if(cctk_lsh(2).le.2*cctk_nghostzones(2)) then
     write(*,*) "ERROR: MUST SET NY>NGHOSTZONESY*2!"
     stop
  else if(cctk_lsh(3).le.2*cctk_nghostzones(3)) then
     write(*,*) "ERROR: MUST SET NZ>NGHOSTZONESZ*2!"
     stop
  end if

  write(*,*) "Okay... Looks like you set up the grid correctly EXTENTS:",cctk_lsh
  write(*,*) "Okay... Looks like you set up the grid correctly GZS:",cctk_nghostzones

  dT = CCTK_DELTA_TIME
  dX = CCTK_DELTA_SPACE(1)
  dY = CCTK_DELTA_SPACE(2)
  dZ = CCTK_DELTA_SPACE(3)

  !initialize all this stuff                                                                                             
  P=ZERO
  rho_star=ZERO
  rhoYe=ZERO
  h=ZERO
  w=ZERO
  tau=ZERO
  st_x=ZERO
  st_y=ZERO
  st_z=ZERO
  tau_rad=ZERO
  S_rad_x=ZERO
  S_rad_y=ZERO
  S_rad_z=ZERO

  sbt=ZERO
  sbx=ZERO
  sby=ZERO
  sbz=ZERO
  Bx=ZERO
  By=ZERO
  Bz=ZERO
  Ex=ZERO
  Ey=ZERO
  Ez=ZERO
  mhd_st_x=ZERO
  mhd_st_y=ZERO
  mhd_st_z=ZERO

  ! Set excision_zone_gf to avoid valgrind memory errors                                                                 
  excision_zone_gf = 0


  write(*,*) "Start generating OS ID!!!! M=",M_OS
  write(*,*) "Start generating OS ID!!!! R=",R_OS
  write(*,*) "Start generating OS ID!!!! x,y,z=",xc_OS, yc_OS, zc_OS
  write(*,*) "Start generating OS ID!!!! P_over_rho=",P_over_rho
  write(*,*) "Start generating OS ID!!!! E_over_rho=",E_over_rho



  rho_OS = 3.0*M_OS/(4.0*pi*R_OS*R_OS*R_OS)

  r_iso = R_OS * (1.0 - M_OS/R_OS + sqrt(1.0 - 2.0*M_OS/R_OS))/2.0

  write(*,*) "Stellar density and isotropic radius are", rho_OS, r_iso


  !!!!First, set the BSSN variables!!!!


  do k=1,ext(3)
     do j=1,ext(2)
        do i=1,ext(1)
           xs = sqrt((X(i,j,k)-xc_OS)**2 + (Y(i,j,k)-yc_OS)**2 + (Z(i,j,k)-zc_OS)**2)
	   if ( xs .gt. r_iso) then
	      psi(i,j,k) = 1.0 + M_OS/(2.0 *xs) 
	   else
	      tempOS1 = (1.0 + sqrt (1.0 - 2.0 * M_OS /R_OS)) * r_iso * R_OS**2
	      tempOS2 = 2.0 * r_iso**3 + M_OS * xs**2 	
	      psi(i,j,k) = sqrt (tempOS1/tempOS2)
	   end if
	   
	   phi(i,j,k) = log(psi(i,j,k))
	end do   
     end do
  end do
  !======================================
  ! Set other metric data to Minkowski
  !======================================
  phix = ZERO
  phiy = ZERO
  phiz = ZERO
  lapm1 = ZERO
  gxx = ONE
  gyy = ONE
  gzz = ONE
  gxy = ZERO
  gxz = ZERO
  gyz = ZERO
  gupxx = ONE
  gupyy = ONE
  gupzz = ONE
  gupxy = ZERO
  gupxz = ZERO
  gupyz = ZERO
  Gammax = ZERO
  Gammay = ZERO
  Gammaz = ZERO
  !======================================
  ! Set K_ij to Zero!
  !======================================
  trK = ZERO
  Axx = ZERO
  Axy = ZERO
  Axz = ZERO
  Ayy = ZERO
  Ayz = ZERO
  Azz = ZERO
  !====================================== 
  ! Set derivatives to zero                                                                                                                                            
  !======================================                                
  gxxx = 0.D0
  gxxy = 0.D0
  gxxz = 0.D0
  gxyx = 0.D0
  gxyy = 0.D0
  gxyz = 0.D0
  gxzx = 0.D0
  gxzy = 0.D0
  gxzz = 0.D0
  gyyx = 0.D0
  gyyy = 0.D0
  gyyz = 0.D0
  gyzx = 0.D0
  gyzy = 0.D0
  gyzz = 0.D0
  gzzx = 0.D0
  gzzy = 0.D0
  gzzz = 0.D0

  Gammaxxx = 0.D0
  Gammaxxy = 0.D0
  Gammaxxz = 0.D0
  Gammaxyy = 0.D0
  Gammaxyz = 0.D0
  Gammaxzz = 0.D0
  Gammayxx = 0.D0
  Gammayxy = 0.D0
  Gammayxz = 0.D0
  Gammayyy = 0.D0
  Gammayyz = 0.D0
  Gammayzz = 0.D0
  Gammazxx = 0.D0
  Gammazxy = 0.D0
  Gammazxz = 0.D0
  Gammazyy = 0.D0
  Gammazyz = 0.D0
  Gammazzz = 0.D0
  !======================================   
  ! Set BSSN matter sources to zero!                                                                                                                                                          
  !======================================   
  rho = ZERO
  S = ZERO
  Sx = ZERO
  Sy = ZERO
  Sz = ZERO
  Sxx = ZERO
  Sxy = ZERO
  Sxz = ZERO
  Syy = ZERO
  Syz = ZERO
  Szz = ZERO
  !======================================
  ! Set everything else to Zero!
  !======================================
  shiftx = ZERO
  shifty = ZERO
  shiftz = ZERO
  shiftxt = 0.D0
  shiftyt = 0.D0
  shiftzt = 0.D0
  lapset = 0.D0


  do k=1,cctk_lsh(3)
     do j=1,cctk_lsh(2)
        do i=1,cctk_lsh(1)
           Kxx(i,j,k) = 0.d0
           Kxy(i,j,k) = 0.d0
           Kxz(i,j,k) = 0.d0
           Kyy(i,j,k) = 0.d0
           Kyz(i,j,k) = 0.d0
           Kzz(i,j,k) = 0.d0
        end do
     end do
  end do

  call CartSymGN(dummy,cctkGH,'BSSN::BSSN_vars')
  call CartSymGN(dummy,cctkGH,'lapse::lapse_vars')
  call CartSymGN(dummy,cctkGH,'shift::shift_vars')




  !!!!Second, set rho_OS, P, and E_rad (only non-zero matter varibales)!!!!
  !!! Here rhobatm = rho_fact * rho_OS, since rho_OS = rho_max at t = 0
  rhobatm = rho_fact * rho_OS

  do k=1,ext(3)
     do j=1,ext(2)
        do i=1,ext(1)
           psi2=psi(i,j,k)*psi(i,j,k) 
           psi4=psi2*psi2
           xs = sqrt((X(i,j,k)-xc_OS)**2 + (Y(i,j,k)-yc_OS)**2 + (Z(i,j,k)-zc_OS)**2)          
           xspsi2 = xs*psi2

           
           
           !           rho_b(i,j,k) = rho_OS/(exp((xs-r_iso)/rounding)+1.0)+rhobatm*(1.0-1.0/(exp((xs-r_iso)/rounding)+1.0)) 

	      !!! Set other to zero (or one)
              vx(i,j,k)   = 0.d0
              vy(i,j,k)   = 0.d0
              vz(i,j,k)   = 0.d0
              u0(i,j,k)   = 1.d0
              Bx(i,j,k)   = 0.d0
              By(i,j,k)   = 0.d0
              Bz(i,j,k)   = 0.d0
              Bxtilde(i,j,k)   = 0.d0
              Bytilde(i,j,k)   = 0.d0
              Bztilde(i,j,k)   = 0.d0
              Blagrangemultiplier(i,j,k) = 0.D0
              sbt(i,j,k) = 0.d0
              sbx(i,j,k) = 0.d0
              sby(i,j,k) = 0.d0
              sbz(i,j,k) = 0.d0



              if ( xs .lt. r_iso) then
                 rho_b(i,j,k) = rho_OS
                 P_cold = P_over_rho * rho_b(i,j,k)**(gamma_OS)
                 if (rad_evolve_enable .eq. 1) then               
                    E_rad(i,j,k) = P_cold/P_over_rho*E_over_rho
                 else
                    E_rad(i,j,k) = 0.d0
                 end if
                 
              else
!                 rho_b(i,j,k) = rhobatm
                 rho_b(i,j,k) = rho_OS/(exp((xs-r_iso)/rounding)+1.0)+rhobatm*(1.0-1.0/(exp((xs-r_iso)/rounding)+1.0))   
                 P_cold = P_over_rho * rho_b(i,j,k)**(gamma_OS)
                 
                 if (rad_evolve_enable .eq. 1) then
                    E_rad(i,j,k) = P_cold/P_over_rho*E_over_rho
                 else
                    E_rad(i,j,k) = 0.d0
                 end if
              end if


              r_bound = 12.0

              if (compute_microphysics.eq.1) then


                 if (enable_OS_collapse.eq.1) then
                    if (xs .le. OS_T_Rmax) then
                       T_fluid(i,j,k) = 0.001* (0.75 + 0.25* (xs/OS_T_Rmax)**2)
                    else if ( xs .lt. r_iso ) then
                       T_fluid(i,j,k) = 0.001* exp( -0.1*(xs - OS_T_Rmax)**2)
                    else
                       T_fluid(i,j,k) = 1.0e-10
                    end if
                 else ! Not OS collapse, need to be done otherwise.                                                                          
                    T_fluid(i,j,k) = P_cold/rho_b(i,j,k)
                 end if
               
                 T_fluidl_cgs = T_fluid(i,j,k)* c_cgs**2*m_n_cgs/kb_cgs

!if(1==0) then
!                 E_rad_cgs = E_rad (i,j,k) * c_cgs**4 / G_cgs / M_sun_geo**2
!                 T_fluidl_cgs = (E_rad_cgs/(rad_const_cgs * (3.0 + 7.0*3.0/8.0)))**(0.25) ! E_rad ~ aT^4
!                 T_fluid(i,j,k) = T_fluidl_cgs * kb_cgs/(c_cgs**2*m_n_cgs)
!end if

                 rho_b_cgs = c_cgs**2 / G_cgs * rho_b(i,j,k) / M_sun_geo**2
                 n_nucleon = rho_b_cgs/m_n_cgs

!                 Fac_OS = min(1.0, 2.0*(3.0*pi*pi)**(1.0/3.0)*m_n_cgs/(18.0*hbar_cgs*hbar_cgs)*n_nucleon**(-2.0/3.0)*kb_cgs*T_fluidl_cgs)
                 Fac_OS = 1.0
                 eng_thermal_cgs = 11.0/4.0 * rad_const_cgs * T_fluidl_cgs**4.0 + 1.5*n_nucleon*kb_cgs*T_fluidl_cgs*Fac_OS
                 eng_thermal = G_cgs/c_cgs**4 * eng_thermal_cgs * M_sun_geo**2
                 eps_thermal(i,j,k) = eng_thermal/rho_b(i,j,k)
                 eps = P_cold/rho_b(i,j,k)/(gamma_th-1.0) + eps_thermal(i,j,k)
                 
                 P_nucl_cgs = (5.0/3.0-1.0)*(1.5*n_nucleon*kb_cgs*T_fluidl_cgs*Fac_OS)
                 P_nucl = G_cgs/c_cgs**4 * P_nucl_cgs * M_sun_geo**2

                 P_rad_m_cgs = (11.0/12.0)*rad_const_cgs * T_fluidl_cgs**4 
                 P_rad_m = G_cgs/c_cgs**4 * P_rad_m_cgs * M_sun_geo**2
                 P_thermal_OS= P_rad_m + P_nucl
!                 P_thermal_OS= E_rad(i,j,k)/3.0 + P_nucl
                 P(i,j,k) = P_cold + P_thermal_OS
                 if (X(i,j,k).le.9.05.and.X(i,j,k).ge.8.95.and.Y(i,j,k).le.0.05.and.Y(i,j,k).ge.-0.05.and.Z(i,j,k).le.0.05.and.Z(i,j,k).ge.-0.05) then
        !         write (*,*) "P, P_cold, P_thermal, P_nucl, P_nucl_cgs, T_fluidl_cgs, FacOS, n_nucleon=", P(i,j,k), P_cold, P_thermal_OS, P_nucl, P_nucl_cgs, T_fluidl_cgs, Fac_OS, n_nucleon
                 write (*,*) "T_fluid(i,j,k), T_fluidl_cgs, eng_thermal_cgs, eng_thermal, eps_thermal, eps", T_fluid(i,j,k), T_fluidl_cgs, eng_thermal_cgs, eng_thermal, eps_thermal(i,j,k), eps
                 write(*,*) "Fac_OS, rho_b_cgs, m_n_cgs, hbar_cgs, n_nucleon, kb_cgs, N_nu, rad_const_cgs, G_cgs ", Fac_OS, rho_b_cgs, m_n_cgs, hbar_cgs, n_nucleon, kb_cgs, N_nu, rad_const_cgs, G_cgs 
                 end if
              else
                 P(i,j,k) = P_cold
                 T_fluid(i,j,k) = P_cold/rho_b(i,j,k)                 
                 eps = P(i,j,k)/rho_b(i,j,k)/(gamma_th-1.0)
              end if
              
              Y_e(i,j,k)=0.5d0
              rho_star(i,j,k) = psi(i,j,k)**6*rho_b(i,j,k)*u0(i,j,k)
              w(i,j,k)    = rho_star(i,j,k) * u0(i,j,k)
              rhoYe(i,j,k) = rho_star(i,j,k)*Y_e(i,j,k)

              h(i,j,k) = 1.0 +  P(i,j,k)/rho_b(i,j,k) + eps

              tau(i,j,k)   = w(i,j,k)*h(i,j,k)-psi(i,j,k)**6*P(i,j,k)-rho_star(i,j,k)
              
              st_x(i,j,k)  = 0.d0
              st_y(i,j,k)  = 0.d0
              st_z(i,j,k)  = 0.d0
              mhd_st_x(i,j,k) = 0.d0
              mhd_st_y(i,j,k) = 0.d0
              mhd_st_z(i,j,k) = 0.d0


              Ax(i,j,k) = 0.d0
              Ay(i,j,k) = 0.d0
              Az(i,j,k) = 0.d0


	      P_radl = E_rad(i,j,k)/3.d0
   	      F_rad0(i,j,k) = 0.d0
!	      F_radx(i,j,k) = P(i,j,k)/P_over_rho*E_over_rho*X(i,j,k)/xs
!	      F_rady(i,j,k) = P(i,j,k)/P_over_rho*E_over_rho*Y(i,j,k)/xs
!	      F_radz(i,j,k) = P(i,j,k)/P_over_rho*E_over_rho*Z(i,j,k)/xs
              F_radx(i,j,k) = 0.d0
              F_rady(i,j,k) = 0.d0
              F_radz(i,j,k) = 0.d0         

!              F_radx(i,j,k) = P(i,j,k)/P_over_rho*E_over_rho*X(i,j,k)/xs
!              F_rady(i,j,k) = P(i,j,k)/P_over_rho*E_over_rho*Y(i,j,k)/xs*1e-6
!              F_radz(i,j,k) = P(i,j,k)/P_over_rho*E_over_rho*Z(i,j,k)/xs*1e-6
              ! Here we follow Shapiro 1996 to impose a surface boundary condition. E_surf = 0.5 *E_interior.
              ! F_surf = 0.25*E_interior (negative means pointing inward)
              !if ( xs .gt. 0.992*r_iso .and. xs .lt. 1.008*r_iso) then
              !   if (rad_evolve_enable .eq. 1) then
              !      E_rad(i,j,k) = P(i,j,k)/P_over_rho*E_over_rho/2.0
              !      F_radx(i,j,k) = -P(i,j,k)/P_over_rho*E_over_rho/4.0 * X(i,j,k)/xs
              !      F_rady(i,j,k) = -P(i,j,k)/P_over_rho*E_over_rho/4.0 * Y(i,j,k)/xs
              !      F_radz(i,j,k) = -P(i,j,k)/P_over_rho*E_over_rho/4.0 * Z(i,j,k)/xs
              !   end if
              !end if

              u_x = u0(i,j,k)*psi4*(gxx(i,j,k)*(vx(i,j,k) + shiftx(i,j,k)) + &
                   gxy(i,j,k)*(vy(i,j,k) + shifty(i,j,k)) + &
                   gxz(i,j,k)*(vz(i,j,k) + shiftz(i,j,k)))
              u_y = u0(i,j,k)*psi4*(gxy(i,j,k)*(vx(i,j,k) + shiftx(i,j,k)) + &
                   gyy(i,j,k)*(vy(i,j,k) + shifty(i,j,k)) + &
                   gyz(i,j,k)*(vz(i,j,k) + shiftz(i,j,k)))
              u_z = u0(i,j,k)*psi4*(gxz(i,j,k)*(vx(i,j,k) + shiftx(i,j,k)) + &
                   gyz(i,j,k)*(vy(i,j,k) + shifty(i,j,k)) + &
                   gzz(i,j,k)*(vz(i,j,k) + shiftz(i,j,k)))
              
              shift_xl = psi4*(shiftx(i,j,k) * gxx(i,j,k) + shifty(i,j,k)* gxy(i,j,k) + shiftz(i,j,k)* gxz(i,j,k))
              shift_yl = psi4*(shiftx(i,j,k) * gxy(i,j,k) + shifty(i,j,k)* gyy(i,j,k) + shiftz(i,j,k)* gyz(i,j,k))
              shift_zl = psi4*(shiftx(i,j,k) * gxz(i,j,k) + shifty(i,j,k)* gyz(i,j,k) + shiftz(i,j,k)* gzz(i,j,k))

              v_xl = Psi4 *(gxx(i,j,k)*vx(i,j,k) + gxy(i,j,k)*vy(i,j,k) + gxz(i,j,k)*vz(i,j,k))
              v_yl = Psi4 *(gxy(i,j,k)*vx(i,j,k) + gyy(i,j,k)*vy(i,j,k) + gyz(i,j,k)*vz(i,j,k))
              v_zl = Psi4 *(gxz(i,j,k)*vx(i,j,k) + gyz(i,j,k)*vy(i,j,k) + gzz(i,j,k)*vz(i,j,k))

              beta2 = shiftx(i,j,k)*shift_xl + shifty(i,j,k)*shift_yl + shiftz(i,j,k)*shift_zl
              udotbeta = u0(i,j,k)*(vx(i,j,k)*shift_xl + vy(i,j,k)*shift_yl + vz(i,j,k)*shift_zl)
              g_00l =beta2-1.0
              u_0l = g_00l*u0(i,j,k) + udotbeta

              F_rad_xl = psi4 * (gxx(i,j,k) * F_radx(i,j,k) + gxy(i,j,k)  * F_rady(i,j,k) + gxz(i,j,k)  * F_radz(i,j,k)) + shift_xl * F_rad0(i,j,k)
              F_rad_yl = psi4 * (gxy(i,j,k) * F_radx(i,j,k) + gyy(i,j,k)  * F_rady(i,j,k) + gyz(i,j,k)  * F_radz(i,j,k)) + shift_yl * F_rad0(i,j,k)
              F_rad_zl = psi4 * (gxz(i,j,k) * F_radx(i,j,k) + gyz(i,j,k)  * F_rady(i,j,k) + gzz(i,j,k)  * F_radz(i,j,k)) + shift_zl * F_rad0(i,j,k)
              F_rad_scalar(i,j,k) = sqrt(psi4*(gxx(i,j,k)*(F_radx(i,j,k))**2+gyy(i,j,k)*(F_rady(i,j,k))**2+gzz(i,j,k)*(F_radz(i,j,k))**2 + 2.0*( gxy(i,j,k)*F_radx(i,j,k)*F_rady(i,j,k) + gxz(i,j,k)*F_radx(i,j,k)*F_radz(i,j,k) + gyz(i,j,k)*F_rady(i,j,k)*F_radz(i,j,k))))
 
	      if (rad_evolve_enable .eq. 1) then
                 if(rad_closure_scheme .eq. 0) then
                    tau_rad(i,j,k) = psi(i,j,k)**6*((E_rad(i,j,k) + P_radl)*u0(i,j,k)*u0(i,j,k) + 2.0*u0(i,j,k)*F_rad0(i,j,k)-P_radl)
                    S_rad_x(i,j,k) = psi(i,j,k)**6*((E_rad(i,j,k) + P_radl)*u0(i,j,k)*u0(i,j,k)*vx(i,j,k) + F_rad0(i,j,k)*u0(i,j,k)*vx(i,j,k) + F_radx(i,j,k)*u0(i,j,k))
                    S_rad_y(i,j,k) = psi(i,j,k)**6*((E_rad(i,j,k) + P_radl)*u0(i,j,k)*u0(i,j,k)*vy(i,j,k) + F_rad0(i,j,k)*u0(i,j,k)*vy(i,j,k) + F_rady(i,j,k)*u0(i,j,k))
                    S_rad_z(i,j,k) = psi(i,j,k)**6*((E_rad(i,j,k) + P_radl)*u0(i,j,k)*u0(i,j,k)*vz(i,j,k) + F_rad0(i,j,k)*u0(i,j,k)*vz(i,j,k) + F_radz(i,j,k)*u0(i,j,k))
                 else
                    ! At t=0, we set metric to Minkowsiki. So F^0=-F_0, F^i=F_i 
                    if (E_rad(i,j,k).le.Erad_atm_cut) then
                       zeta=1.d0
                    else
                       zeta = sqrt((-F_rad0(i,j,k)**2 + F_radx(i,j,k)*F_rad_xl + F_rady(i,j,k)*F_rad_yl + F_radz(i,j,k)*F_rad_zl)/E_rad(i,j,k)**2)
                    end if
                    
                    if (zeta .gt. 1.0) then
                       zeta = 1.0;
                    end if
                    zeta_rad(i,j,k) = zeta
                    chi_shock  = 1.0/3.0 + zeta**2*(6.0-2.0*zeta+6.0*zeta**2)/15.0
                    chi_rad(i,j,k) = chi_shock
                    Fasq = F_radx(i,j,k)*F_rad_xl + F_rady(i,j,k)*F_rad_yl + F_radz(i,j,k)*F_rad_zl ! F_rad0 =0
                    C_A = (3.0*chi_shock -1.0)/2.0
                    C_B = 1.5*(1.0-chi_shock)

                    if (E_rad(i,j,k) .le. Erad_atm_cut) then
                       P_radxx(i,j,k) = 0.0
                       P_radyy(i,j,k) = 0.0
                       P_radzz(i,j,k) = 0.0
                       P_radxy(i,j,k) = 0.0
                       P_radxz(i,j,k) = 0.0
                       P_radyz(i,j,k) = 0.0
                    else
                       if (Fasq .eq. 0.0) then
                          P_radxx(i,j,k) = E_rad(i,j,k)*(gupxx(i,j,k)/psi4+(u0(i,j,k)*vx(i,j,k))**2)/3.0*C_B
                          P_radyy(i,j,k) = E_rad(i,j,k)*(gupyy(i,j,k)/psi4+(u0(i,j,k)*vy(i,j,k))**2)/3.0*C_B
                          P_radzz(i,j,k) = E_rad(i,j,k)*(gupzz(i,j,k)/psi4+(u0(i,j,k)*vz(i,j,k))**2)/3.0*C_B
                          P_radxy(i,j,k) = E_rad(i,j,k)*(gupxy(i,j,k)/psi4+u0(i,j,k)**2*vx(i,j,k)*vy(i,j,k))/3.0*C_B
                          P_radxz(i,j,k) = E_rad(i,j,k)*(gupxz(i,j,k)/psi4+u0(i,j,k)**2*vx(i,j,k)*vz(i,j,k))/3.0*C_B
                          P_radyz(i,j,k) = E_rad(i,j,k)*(gupyz(i,j,k)/psi4+u0(i,j,k)**2*vy(i,j,k)*vz(i,j,k))/3.0*C_B
                       else
                          P_radxx(i,j,k) = F_radx(i,j,k)**2*E_rad(i,j,k)/Fasq*C_A + E_rad(i,j,k)*(gupxx(i,j,k)/psi4+(u0(i,j,k)*vx(i,j,k))**2)/3.0*C_B
                          P_radyy(i,j,k) = F_rady(i,j,k)**2*E_rad(i,j,k)/Fasq*C_A + E_rad(i,j,k)*(gupyy(i,j,k)/psi4+(u0(i,j,k)*vy(i,j,k))**2)/3.0*C_B
                          P_radzz(i,j,k) = F_radz(i,j,k)**2*E_rad(i,j,k)/Fasq*C_A + E_rad(i,j,k)*(gupzz(i,j,k)/psi4+(u0(i,j,k)*vz(i,j,k))**2)/3.0*C_B
                          P_radxy(i,j,k) = F_radx(i,j,k)*F_rady(i,j,k)*E_rad(i,j,k)/Fasq*C_A + E_rad(i,j,k)*(gupxy(i,j,k)/psi4+u0(i,j,k)**2*vx(i,j,k)*vy(i,j,k))/3.0*C_B
                          P_radxz(i,j,k) = F_radx(i,j,k)*F_radz(i,j,k)*E_rad(i,j,k)/Fasq*C_A + E_rad(i,j,k)*(gupxz(i,j,k)/psi4+u0(i,j,k)**2*vx(i,j,k)*vz(i,j,k))/3.0*C_B
                          P_radyz(i,j,k) = F_rady(i,j,k)*F_radz(i,j,k)*E_rad(i,j,k)/Fasq*C_A + E_rad(i,j,k)*(gupyz(i,j,k)/psi4+u0(i,j,k)**2*vy(i,j,k)*vz(i,j,k))/3.0*C_B
                       end if
                    end if

                    P_rad0xl = -(P_radxx(i,j,k) * u_x + P_radxy(i,j,k) * u_y + P_radxz(i,j,k) * u_z)/u_0l
                    P_rad0yl = -(P_radxy(i,j,k) * u_x + P_radyy(i,j,k) * u_y + P_radyz(i,j,k) * u_z)/u_0l
                    P_rad0yl = -(P_radxz(i,j,k) * u_x + P_radyz(i,j,k) * u_y + P_radzz(i,j,k) * u_z)/u_0l
                    P_rad00l = -(P_rad0xl * u_x + P_rad0yl * u_y + P_rad0zl * u_z)/u_0l
                    
                    
                    
                    tau_rad(i,j,k) = psi(i,j,k)**6*(E_rad(i,j,k)*u0(i,j,k)*u0(i,j,k) + 2.0*u0(i,j,k)*F_rad0(i,j,k) + P_rad00l)
                    S_rad_x(i,j,k) = psi(i,j,k)**6*(E_rad(i,j,k)*u0(i,j,k)*u_x + F_rad0(i,j,k)*u_x &
                         + F_rad_xl*u0(i,j,k) + P_rad00l*shift_xl + psi4*(P_rad0xl*gxx(i,j,k) + P_rad0yl*gxy(i,j,k) + P_rad0zl*gxz(i,j,k)))
                    S_rad_y(i,j,k) = psi(i,j,k)**6*(E_rad(i,j,k)*u0(i,j,k)*u_y + F_rad0(i,j,k)*u_y &
                         + F_rad_yl*u0(i,j,k) + P_rad00l*shift_yl + psi4*(P_rad0xl*gxy(i,j,k) + P_rad0yl*gyy(i,j,k) + P_rad0zl*gyz(i,j,k)))
                    S_rad_z(i,j,k) = psi(i,j,k)**6*(E_rad(i,j,k)*u0(i,j,k)*u_y + F_rad0(i,j,k)*u_y &
                         + F_rad_zl*u0(i,j,k) + P_rad00l*shift_zl + psi4*(P_rad0xl*gxz(i,j,k) + P_rad0yl*gyz(i,j,k) + P_rad0zl*gzz(i,j,k)))   
                                     
                    
                    if (isnan(tau_rad(i,j,k))) then
                       write(*,*) "In OS_initialdata_local, tau_rad is nan!!!! i,j,k are", i,j,k
                       write(*,*) "P_rad00l, P_radxx(i,j,k), zeta, E_rad(i,j,k) = ",P_rad00l, P_radxx(i,j,k), zeta, E_rad(i,j,k)
                    end if
                 end if
              else
                 tau_rad(i,j,k) = 0.d0
                 S_rad_x(i,j,k) = 0.d0
                 S_rad_y(i,j,k) = 0.d0
                 S_rad_z(i,j,k) = 0.d0	  
 	      end if
        
        rho (i,j,k) = h(i,j,k)*w(i,j,k)*psi(i,j,k)**(-6.0)-P(i,j,k) + E_rad(i,j,k)
        
        Sxx(i,j,k) = psi(i,j,k)**4 * (P(i,j,k) + P_radl)
        Syy(i,j,k) = psi(i,j,k)**4 * (P(i,j,k) + P_radl)
        Szz(i,j,k) = psi(i,j,k)**4 * (P(i,j,k) + P_radl)
        
	end do		   
     end do
  end do

!!!Since Everywhere is in LTE. We can compute rad_const anywhere
!!! To make sure rad_const is constant everywhere, rad_const = E/T^4 = E_over_rho * rho**gamma / (P_over_rho* rho**(gamma-1))**4
!!! = E_over_rho/P_over_rho**4  * rho**(4-3*gamma) = const. --> gamma = 4/3

!  rad_const = E_over_rho/(P_over_rho)**4*M_OS/(4.d0*pi*R_OS**3/3.d0)
  rad_const = E_over_rho/P_over_rho**4 * (rho_OS)**(4.0-3.0*gamma_OS)
!  rad_const = E_over_rho/P_over_rho**4 * (rho_OS)**(5.0-4.0*gamma_th)
  write(*,*) "rad_const is", rad_const
!  write(*,*) "Check: E_over_rho/P_over_rho * rho_b**(4.0-3*gamma_th) =", E_over_rho/P_over_rho**4 * (M_OS/(4.d0*pi*R_OS**3/3.d0) )**(4.0-3.0*gamma_th)

  neos = 1
  write(*,*) "Assuming polytropic EOS..."
  write(*,*) "Polytropic constant K = ",P_over_rho
  rho_tab(1) = rho_OS*100.0

!  P_tab(1) = P_over_rho*rho_tab(1)**(gamma_th)
!  eps_tab(1) = 1.0/(gamma_th - 1.0) * P_tab(1)/rho_tab(1)
!  gamma_tab(1) = gamma_th
!  k_tab(1) = P_over_rho
!  gamma_tab(2) = gamma_th
!  k_tab(2) = P_over_rho

! In compute_pcold_epscold_cpp P_cold = P_over_rho * rho ** gamma_OS
! eps_cold = P_cold/rho/(gamma_th -1.0)
! To use Gamma-law EOS, we set P = (gamma_th-1.0)*rho_b*eps

  P_tab(1) = P_over_rho*rho_tab(1)
  eps_tab(1) = 0.0
  gamma_tab(1) = gamma_th
  k_tab(1) = P_over_rho
  gamma_tab(2) = gamma_th
  k_tab(2) = P_over_rho

  write(*,*) "rho_tab(1), P_tab(1), gamma_tab(1), k_tab(1) = ", rho_tab(1), P_tab(1), gamma_tab(1), k_tab(1)

  !gamma_th = 0.d0 




  !======================================
  ! Set initial EM fields to zero:
  !======================================

  Ex = By*vz - Bz*vy
  Ey = Bz*vx - Bx*vz
  Ez = Bx*vy - By*vx
  !!Ex = ZERO
  !!Ey = ZERO
  !!Ez = ZERO


  ! With P = 0, Sx=Sy=Sz = 0, Sxy=Syz=Sxz=0, however, Sxx, Syy, Szz and rho are not zero!!!!
  
!  Sxx = ZERO
  Sxy = ZERO
  Sxz = ZERO
!  Syy = ZERO
  Syz = ZERO
!  Szz = ZERO

  Sx = ZERO
  Sy = ZERO
  Sz = ZERO

!    !particle tracer stuff                                                                                                 
  do index=1,narr
     coord(index,1)=0.d0  
     coord(index,2)=index*(particle_rad_cut*r_iso/narr)
     coord(index,3)=0.d0                                                                                 
     coord(index,4)=0.d0                                                 
  end do    



  write(*,*) "Particle Positions:", coord(:,2)
  write(*,*) "LOCAL INITIALDATA FINISHED!",dx,mhd_st_x(4,4,4)
  write(*,*) "LOCAL INITIALDATA FINISHED! y=",y(1,:,1)


end subroutine mhd_OS_initialdata_local
