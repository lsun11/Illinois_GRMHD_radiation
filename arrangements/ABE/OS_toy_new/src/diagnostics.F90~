#include "cctk.h"
#include "cctk_Arguments.h"
#include "cctk_Functions.h"
#include "cctk_Parameters.h"
!
!-----------------------------------------------------------------------------
! Diagnostic output for bondi thorn
!-----------------------------------------------------------------------------
subroutine OS_toy_diagnostics(CCTK_ARGUMENTS)
  
  implicit none

  DECLARE_CCTK_ARGUMENTS
  DECLARE_CCTK_PARAMETERS
  DECLARE_CCTK_FUNCTIONS
  integer                                  :: ii,jj,vindex,num_cols,header_flag, handle, ierr
  real*8                                   :: rho_analytic
  real*8                                   :: dT,lapse_center,rho_center,rho_center_analytic,P_center,trK_center,Q_analytic
  character                                :: filename*50
  real*8, dimension(50)                    :: export_data
  character, dimension(50)                 :: data_headers*20
 
  dT = CCTK_DELTA_TIME
  

  write(*,*) "before interp_center"
  !--------------------------------------------------------------------------------!
  call CCTK_VarIndex (vindex, "lapse::lapm1")
  call interp_center_carp(cctkGH,vindex,lapse_center)
  call CCTK_VarIndex (vindex, "mhd_evolve::rho_b")
  call interp_center_carp(cctkGH,vindex,rho_center)
  call CCTK_VarIndex (vindex, "mhd_evolve::P") 
  call interp_center_carp(cctkGH,vindex,P_center)
  call CCTK_VarIndex (vindex, "bssn::trK")
  call interp_center_carp(cctkGH,vindex,trK_center)
  write(*,*) "after interp_center"


  lapse_center=lapse_center+1.d0
   write(*,*) "OS_toy, Checkpoint1: tau_center_OS =", tau_center_OS
  
  if (CCTK_TIME .gt. 0) then 
     tau_center_OS = tau_center_OS+dT*lapse_center
  endif

  write(*,*) "lapse_center=, dT =, tau_center_OS =", lapse_center, dT, tau_center_OS

  if (MOD(cctk_iteration,out_every)==0) then  
     !header_flag == 1 -> write file headers
     if(CCTK_TIME == 0.D0) then 
        header_flag = 1 
     else
        header_flag = 0 
     end if
 
     call OS_analytic(tau_center_OS,rho_center_analytic,Q_analytic,R_OS,M_OS)
     
     filename = 'OS_collapse.mon'
     num_cols = 9
     export_data = 0.d0
     data_headers(1) = '# Time'
     export_data(1) = CCTK_TIME
     data_headers(2) = 'tau_center'
     export_data(2) = tau_center_OS
     data_headers(3) = 'lapse_center'
     export_data(3) = lapse_center
     data_headers(4) = 'rho_center'
     export_data(4) = rho_center
     data_headers(5) = 'rho_center_analytic'
     export_data(5) = rho_center_analytic
     data_headers(6) = 'Q_analytic'
     export_data(6) = Q_analytic
     data_headers(7) = 'baumgarte_analytic_lapse'
     export_data(7) = 1.d0+6.d0*log(Q_analytic)
     data_headers(8) = 'P_center'
     export_data(8) = P_center
     data_headers(9) = 'trK_center'
     export_data(6) = trK_center
     if(CCTK_MyProc(CCTKGH)==0) call output_data_to_file(filename,num_cols,data_headers,export_data,header_flag)
end if  
  !--------------------------------------------------------------------------------!

     do ii=1,nsurf

        surf_radius=surfvec(ii)
        rbr=rbrvec(ii)
        drbdr=drbrvec(ii)
        ddrbddr=ddrbrvec(ii)

        if(nsurf.eq.1) then
           filename = 'OS_collapse.jon'
        else
           write(filename,31)ii
31         FORMAT("OS_collapse.jon.",I1)
        endif

        num_cols = 9

        data_headers(1) = '# Time'
        export_data(1) = CCTK_TIME

        data_headers(2) = "fisheye radius"
        export_data(2) = surf_radius

        data_headers(3) = "phys radius"
        export_data(3) = surf_radius*rbr

        data_headers(4) = "Mass_sur"
        call M_surf_integral(cctkGH,export_data(4))

        data_headers(5) = "Ang_mom_surf"
        call J_surf_integral_offcenter(cctkGH,0.D0,0.D0,0.D0,export_data(5))

        data_headers(6) = "Komar Mass"
        call Komar_surf_integralv2(cctkGH,export_data(6))

        data_headers(7) = "P_x2"
        data_headers(8) = "P_y2"
        data_headers(9) = "P_z2"
        call P_surf_integralv2(cctkGH,export_data(7),export_data(8),export_data(9))

        if(CCTK_MyProc(CCTKGH)==0) call output_data_to_file(filename,num_cols,data_headers,export_data,header_flag)
     end do


     !--------------------------------------------------------------------------------!

          filename = 'OS.mon'
     num_cols = 19
     export_data = 0.D0
     data_headers = 'unknowndude'

     data_headers(1) = '# Time'
     export_data(1) = CCTK_TIME

     data_headers(2) = 'Phicent'
     call CCTK_VarIndex (vindex, "bssn::phi")
     call interp_center_carp(cctkGH,vindex,export_data(2))

     data_headers(3) = 'Kcent'
     call CCTK_VarIndex (vindex, "bssn::trK")
     call interp_center_carp(cctkGH,vindex,export_data(3))

     data_headers(4) = 'lapsecent'
     call CCTK_VarIndex (vindex, "lapse::lapm1")
     call interp_center_carp(cctkGH,vindex,export_data(4))
     export_data(4) = export_data(4) + 1.D0

     data_headers(5) = 'psicent'
     !     Psi = exp(phi)                                                                                                                                                                                        
     call CCTK_VarIndex (vindex, "bssn::psi")
     call interp_center_carp(cctkGH,vindex,export_data(5))

     data_headers(6) = 'lapsemin'
     call CCTK_ReductionHandle(handle,"minimum")
     call CCTK_VarIndex(vindex,"lapse::lapm1")
     call CCTK_Reduce (ierr,cctkGH, -1,handle, 1, CCTK_VARIABLE_REAL,export_data(6),1,vindex)
     export_data(6) = export_data(6) + 1.D0

     data_headers(7) = 'phimax'
     call CCTK_ReductionHandle(handle,"maximum")
     call CCTK_VarIndex(vindex,"bssn::phi")
     call CCTK_Reduce (ierr,cctkGH, -1,handle, 1, CCTK_VARIABLE_REAL,export_data(7),1,vindex)

     data_headers(8) = 'rhocent'
     call CCTK_VarIndex (vindex, "mhd_evolve::rho_b")
     call interp_center_carp(cctkGH,vindex,export_data(8))

     data_headers(9) = 'rho_b_max'
     call CCTK_ReductionHandle(handle,"maximum")
     call CCTK_VarIndex (vindex, "mhd_evolve::rho_b")
     call CCTK_Reduce (ierr,cctkGH, -1,handle, 1, CCTK_VARIABLE_REAL,export_data(9),1,vindex)

     
     export_data(9)  = bhns_max_rho_b
     print *, "bhns_max_rho_b=", bhns_max_rho_b


     data_headers(10) = 'Jsurf_BH_1.1'
     surf_radius=BH_Vol_Excise_Radius
     old_surf_radius = surf_radius
!     surf_radius=1.1D0                                                                         
     surf_radius=BH_Vol_Excise_Radius
     call J_surf_integral_offcenter(cctkGH,bh_posn_x(1),bh_posn_y(1),bh_posn_z(1),export_data(1\
0))
     surf_radius = old_surf_radius

     ! J_ADM volume integral is computed in scheduler of diagnostics_vacuum                     
     data_headers(11) = "J_1.1exVol"
     export_data(11) = J_ADM_VolInt*SymmFactor
!     print *,"J_ADM_VolInt=",J_ADM_VolInt,"SymmFactor=",SymmFactor                             

     data_headers(12) = "M_ADMsurf_BH_1.1"
     surf_radius=BH_Vol_Excise_Radius
     old_surf_radius = surf_radius
!     surf_radius=1.1D0                                                                         
     surf_radius=BH_Vol_Excise_Radius
     call M_surf_integral_offcenter_nofish(cctkGH,bh_posn_x(1),bh_posn_y(1),bh_posn_z(1),export\
_data(12))
     surf_radius = old_surf_radius

     ! M_ADM volume integral is computed in scheduler of diagnostics_vacuum                     
     data_headers(13) = "M_ADM1.1exVol"
     export_data(13) = M_ADM_VolInt*SymmFactor

     data_headers(14) = 'rhostar_min'
     call CCTK_ReductionHandle(handle,"minimum")
     call CCTK_VarIndex (vindex, "mhd_evolve::rho_star")
     call CCTK_Reduce (ierr,cctkGH, -1,handle, 1, CCTK_VARIABLE_REAL,export_data(14),1,vindex)

     ! J_ADM volume integral is computed in scheduler of diagnostics_vacuum                     
     data_headers(15) = "J_1.1exVolr"
     export_data(15) = J_ADM_VolInt_inner*SymmFactor

     ! J_ADM volume integral is computed in scheduler of diagnostics_vacuum                     
     data_headers(16) = "J_1.1exVolr/2"
     export_data(16) = J_ADM_VolInt_inner2*SymmFactor

     !     data_headers(8) = 'Omega_c'                                                          
     !     Pr = (vy*X - vx*Y) / (X*X + Y*Y)                                                     
     !     call CCTK_VarIndex (vindex, "mhd_evolve::Pr")                                        
     !     call interp_center_carp(cctkGH,vindex,export_data(8))                                

        data_headers(17) = 'rho_b_max_x'
        call CCTK_ReductionHandle(handle,"maximum")
        call CCTK_VarIndex (vindex, "mhd_evolve::temp12")
        call CCTK_Reduce (ierr,cctkGH, -1,handle, 1, CCTK_VARIABLE_REAL,export_data(17),1,vinde\
x)

        data_headers(18) = 'rho_b_max_y'
        call CCTK_ReductionHandle(handle,"maximum")
        call CCTK_VarIndex (vindex, "mhd_evolve::temp13")
        call CCTK_Reduce (ierr,cctkGH, -1,handle, 1, CCTK_VARIABLE_REAL,export_data(18),1,vinde\
x)

        data_headers(19) = 'rho_b_max_z'
        call CCTK_ReductionHandle(handle,"maximum")
        call CCTK_VarIndex (vindex, "mhd_evolve::temp14")
        call CCTK_Reduce (ierr,cctkGH, -1,handle, 1, CCTK_VARIABLE_REAL,export_data(19),1,vinde\
x)

!        print *, "here=", rho_b_max_x,rho_b_max_y,rho_b_max_z                                  


     if(CCTK_MyProc(CCTKGH)==0) call output_data_to_file(filename,num_cols,data_headers,export_\
data,header_flag)
     
end subroutine OS_toy_diagnostics
