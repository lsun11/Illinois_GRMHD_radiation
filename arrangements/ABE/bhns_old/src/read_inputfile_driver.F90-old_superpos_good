
#include "cctk.h"
#include "cctk_Arguments.h"
#include "cctk_Functions.h"
#include "cctk_Parameters.h"

subroutine bhns_initialdata_read_binfile_driver(CCTK_ARGUMENTS)
  implicit none
  DECLARE_CCTK_ARGUMENTS
  DECLARE_CCTK_PARAMETERS
  DECLARE_CCTK_FUNCTIONS

  integer, dimension(3) :: ext
  !eta_falloff_radius-eta_falloff_dr*2.0)/eta_falloff_dr)*(eta-eta_final_value
  real*8 		:: dX,dY,dZ,superposition_factor,eta_falloffr,eta_falloffdr,inner_value,outer_value
  integer               :: i,ierr
  write(*,*) "If Valgrind gives an error right before this line, ignore the error."

  dX = CCTK_DELTA_SPACE(1)
  dY = CCTK_DELTA_SPACE(2)
  dZ = CCTK_DELTA_SPACE(3)

  ext = cctk_lsh

  !Set initial BH position to zero.
  bh_posn_x = 0.D0
  bh_posn_y = 0.D0
  bh_posn_z = 0.D0

  write(*,*) "n_ijk:",cctk_lsh
  write(*,*) "ZZZ:",Z(1,1,:)
!  write(*,*) "X:",X(:,1,1)

  if(use_new_bhns_initial_data==0) then
     call read_inputfile_bhns(cctkGH,genID_cmdline_output_enable,fisheye_enable,reset_shift_lapse, &
          X(1,1,1),Y(1,1,1),Z(1,1,1), &
          dX,dY,dZ,cctk_lsh, &
          lapm1,shiftx,shifty,shiftz, &
          phi,Axx,Axy,Axz,Ayy,Ayz, &
          rho_b,vx,vy,vz, &
          gamma_th,bh_posn_x(1),BigM)
  else
     call read_inputfile_bhns_bhspin(cctkGH,genID_cmdline_output_enable,fisheye_enable, &
          X(1,1,1),Y(1,1,1),Z(1,1,1), &
          dX,dY,dZ,cctk_lsh, &
          lapm1,shiftx,shifty,shiftz, &
          phi,Axx,Axy,Axz,Ayy,Ayz,Azz, &
          rho_b,vx,vy,vz, &
          gamma_th,bh_posn_x(1),BigM,initial_ns_coord_x,initial_ns_coord_y,0)

     call read_inputfile_bhns_bhspin(cctkGH,genID_cmdline_output_enable,fisheye_enable, &
          X(1,1,1),Y(1,1,1),Z(1,1,1), &
          dX,dY,dZ,cctk_lsh, &
          temp1,temp2,temp3,temp4, &
          temp5,Kxx,Kxy,Kxz,Kyy,Kyz,Kzz, &
          temp6,temp7,temp8,temp9, &
          gamma_th,bh_posn_x(1),BigM,initial_ns_coord_x,initial_ns_coord_y,1)

     ! temp10 = radius from NS center
     temp10=sqrt((x-initial_ns_coord_x)**2 + (y-initial_ns_coord_y)**2 + z**2)
     ! temp11 = superposition factor
     !eta_falloff_radius-eta_falloff_dr*2.0)/eta_falloff_dr)*(eta-eta_final_value
     !real*8 		:: dX,dY,dZ,superposition_factor,eta_falloffr,eta_falloffdr,inner_value,outer_value
!     eta_falloffr = 1.0D0
!     eta_falloffdr= 0.25D0
     eta_falloffr = 1.5D0
     eta_falloffdr= 0.5D0
     !inner_value = 0.75D0
     inner_value = 1.D0
     outer_value = 0.9285714285714285714286D0
!     outer_value = 0.8
     !inner_value = 0.9285714285714285714286D0
     !outer_value = 1.D0
     !gnuplot: eta_falloffr = 1.5; eta_falloffdr= 0.5; inner_value = 0; outer_value = 1;p [0.75:4.0] -erf((x-eta_falloffr-eta_falloffdr*2.0)/eta_falloffdr)*(inner_value-outer_value)*0.5 + (inner_value-outer_value)*0.5 + outer_value
     temp11 = -erf((temp10-eta_falloffr-eta_falloffdr*2.0)/eta_falloffdr)*(inner_value-outer_value)*0.5 + (inner_value-outer_value)*0.5 + outer_value

     !superposition_factor = 0.80D0
     !write(*,*) "SUPERPOSITION FACTOR=",superposition_factor

     ! Note that z -> y, and y -> -z in the rotated data
     lapm1 = temp11*lapm1 + (1.D0 - temp11)*temp1
     shiftx = temp11*shiftx + (1.D0 - temp11)*temp2
     shifty = temp11*shifty + (1.D0 - temp11)*(-1.D0)*temp4
     shiftz = temp11*shiftz + (1.D0 - temp11)*temp3

     phi = temp11*phi + (1.D0 - temp11)*temp5
     
     Axx = temp11*Axx + (1.D0 - temp11)*Kxx
     Axy = temp11*Axy + (1.D0 - temp11)*(-1.D0)*Kxz
     Axz = temp11*Axz + (1.D0 - temp11)*Kxy
     Ayy = temp11*Ayy + (1.D0 - temp11)*Kzz
     Ayz = temp11*Ayz + (1.D0 - temp11)*(-1.D0)*Kyz
     Azz = temp11*Azz + (1.D0 - temp11)*Kyy
     
     rho_b = temp11*rho_b + (1.D0 - temp11)*temp6
     vx = temp11*vx + (1.D0 - temp11)*temp7
     vy = temp11*vy + (1.D0 - temp11)*(-1.D0)*temp9
     vz = temp11*vz + (1.D0 - temp11)*temp8

  end if

  if(genID_cmdline_output_enable.ne.1) then
     lapm1 = lapm1 - 1.D0
  else
     lapm1=0.D0

     shiftx=0.D0
     shifty=0.D0
     shiftz=0.D0

     phi = 1.D0

     gxx = 1.D0
     gxy = 0.D0
     gxz = 0.D0
     gyy = 1.D0
     gyz = 0.D0
     gzz = 1.D0

     Axx = 0.D0
     Axy = 0.D0
     Axz = 0.D0
     Ayy = 0.D0
     Ayz = 0.D0
     Azz = 0.D0

     rho_b = 1.D-7
     vx = 0.D0
     vy = 0.D0
     vz = 0.D0

     gamma_th = 1.3D0
  end if



  write(6,*)'gamma_th,BigM,bh_posn_x(1) = ',gamma_th,BigM,bh_posn_x(1)

  ! K_poly=1 because Keisuke's datafiles are in polytropic units already!!!
  k_poly=1.0d0
  n_poly=1.0d0/(gamma_th-1.0d0)
  write(6,*)'BH irreducible mass scaling factor:',BigM
  write(6,*)'BH position x=',bh_posn_x(1),' xbh/mirr=',bh_posn_x(1)/BigM

  neos=1
  rho_tab(1)=1.0
  P_tab(1)=K_poly
  eps_tab(1)=K_poly/(gamma_th-1.0d0)
  do i=1,2
     k_tab(i)=K_poly
     gamma_tab(i)=gamma_th
  enddo

end subroutine bhns_initialdata_read_binfile_driver
