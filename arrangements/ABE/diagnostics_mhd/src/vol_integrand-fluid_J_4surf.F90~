!----------------------------
! Set up rest mass integrand
!----------------------------
#include "cctk.h"
#include "cctk_Arguments.h"
#include "cctk_Functions.h"
#include "cctk_Parameters.h"

subroutine fluid_J_4surf_integrand(CCTK_ARGUMENTS)
  implicit none

  !~~~~~> Input parameters:
  DECLARE_CCTK_ARGUMENTS
  DECLARE_CCTK_PARAMETERS
  DECLARE_CCTK_FUNCTIONS

  !~~~~~> Other variables:
  real*8                             :: dX, dY, dZ
  real*8                             :: rr,rr1,rr2
  real*8                             :: xbh1,ybh1,zbh1,xbh2,ybh2,zbh2
  integer                            :: i,j,k
  integer                            :: AXISYM
  real*8                             :: alp,psi6,psi4,shift_x,shift_y,shift_z,shift2,shiftv,u_0
  real*8                             :: u_x,u_y,u_phi
  parameter(AXISYM = 4)

  WhichIntegral = 116

  if(MOD(cctk_iteration,Compute_VolIntegrands_Every)==0) then
     xbh1 = xbh1_initial * cos(binary_orb_freq*cctk_time) 
     ybh1 = xbh1_initial * sin(binary_orb_freq*cctk_time) 
     zbh1 = 0.d0
     
     xbh2 = xbh2_initial * cos(binary_orb_freq*cctk_time) 
     ybh2 = xbh2_initial * sin(binary_orb_freq*cctk_time) 
     zbh2 = 0.d0
     
     !-----------------------------------------------------------------------------
     ! Compute integrand
     !-----------------------------------------------------------------------------
     !Reset VolIntegrand quickly, using OpenMP
     !$omp parallel do
     do k=1,cctk_lsh(3)
        do j=1,cctk_lsh(2)
           do i=1,cctk_lsh(1)
              VolIntegrand(i,j,k) = 0.D0
              VolIntegrand2(i,j,k) = 0.D0
              VolIntegrand3(i,j,k) = 0.D0
              VolIntegrand4(i,j,k) = 0.D0
           end do
        end do
     end do
     !$omp end parallel do

     !$omp parallel do
     do k = cctk_nghostzones(3)+1,cctk_lsh(3)-cctk_nghostzones(3)
        do j = cctk_nghostzones(2)+1,cctk_lsh(2)-cctk_nghostzones(2)
           do i = cctk_nghostzones(1)+1,cctk_lsh(1)-cctk_nghostzones(1)
              rr1 = sqrt((X(i,j,k)-xbh1)*(X(i,j,k)-xbh1)+& 
                   (Y(i,j,k)-ybh1)*(Y(i,j,k)-ybh1)+& 
                   (Z(i,j,k)-zbh1)*(Z(i,j,k)-zbh1)) 
              rr2 = sqrt((X(i,j,k)-xbh2)*(X(i,j,k)-xbh2)+& 
                   (Y(i,j,k)-ybh2)*(Y(i,j,k)-ybh2)+& 
                   (Z(i,j,k)-zbh2)*(Z(i,j,k)-zbh2)) 
              rr = sqrt(X(i,j,k)*X(i,j,k)+Y(i,j,k)*Y(i,j,k)+Z(i,j,k)*Z(i,j,k)) 
  
              !alp = lapm1(i,j,k)+1.d0
              !psi6 = exp(6.d0*phi(i,j,k))
              psi4 = exp(4.d0*phi(i,j,k))
                 
              !shift_x = psi4*(gxx(i,j,k)*shiftx(i,j,k)+gxy(i,j,k)*shifty(i,j,k)+gxz(i,j,k)*shiftz(i,j,k))
              !shift_y = psi4*(gxy(i,j,k)*shiftx(i,j,k)+gyy(i,j,k)*shifty(i,j,k)+gyz(i,j,k)*shiftz(i,j,k)) 
              !shift_z = psi4*(gxz(i,j,k)*shiftx(i,j,k)+gyz(i,j,k)*shifty(i,j,k)+gzz(i,j,k)*shiftz(i,j,k)) 
                 
              !shift2 = shift_x*shiftx(i,j,k) + shift_y*shifty(i,j,k) + shift_z*shiftz(i,j,k)
              !shiftv = shift_x*vx(i,j,k) + shift_y*vy(i,j,k) + shift_z*vz(i,j,k) 
                 
              !u_0 = u0(i,j,k)*(-alp*alp + shift2 + shiftv)
                 
              u_x = u0(i,j,k)*psi4*(gxx(i,j,k)*(shiftx(i,j,k)+vx(i,j,k)) +&
                      gxy(i,j,k)*(shifty(i,j,k)+vy(i,j,k)) +&
                      gxz(i,j,k)*(shiftz(i,j,k)+vz(i,j,k)))
              u_y = u0(i,j,k)*psi4*(gxy(i,j,k)*(shiftx(i,j,k)+vx(i,j,k)) +&
                      gyy(i,j,k)*(shifty(i,j,k)+vy(i,j,k)) +&
                      gyz(i,j,k)*(shiftz(i,j,k)+vz(i,j,k)))
                 
              u_phi = -Y(i,j,k)*u_x + X(i,j,k)*u_y

              if ((rr1 .lt. rah1_initial) .or. (rr2 .lt. rah2_initial)) then     
                  VolIntegrand(i,j,k) = rho_star(i,j,k)*h(i,j,k)*u_phi
              else if (rr .lt. 10.d0) then
      	          VolIntegrand2(i,j,k) = rho_star(i,j,k)*h(i,j,k)*u_phi
	      else if (rr .lt. 25.d0) then
	          VolIntegrand3(i,j,k) = rho_star(i,j,k)*h(i,j,k)*u_phi
	      else if (rr .lt. 40.d0) then
	          VolIntegrand4(i,j,k) = rho_star(i,j,k)*h(i,j,k)*u_phi
              endif
           end do ! i-loop
        end do ! j-loop
     end do ! k-loop
     !$omp end parallel do
     if (Symmetry == AXISYM) then
        VolIntegrand = X*VolIntegrand
     end if
  end if

  !Need to reset mask.  Otherwise AH finder will basically turn off.
  !Reset emask quickly, using OpenMP
  if (num_BHs .ne. 0) then
     !$omp parallel do
     do k=1,cctk_lsh(3)
        do j=1,cctk_lsh(2)
           do i=1,cctk_lsh(1)
              emask(i,j,k) = 1.D0
           end do
        end do
     end do
     !$omp end parallel do
  end if

end subroutine fluid_J_4surf_integrand
